{"version":3,"sources":["AppContext.tsx","utils.ts","timeline.tsx","TopMenu.tsx","Country.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","links","entities","status","AppContext","createContext","state","dispatch","arg","console","log","groupByGPHCode","groupBy","link","GPH_code","toMap","object","map","MultiMap","key","hasOwnProperty","entity","undefined","index","length","set","reducer","action","type","linkPayload","payload","statusPayload","csvLink","l","id","uuid","GPH_name","end_year","Date","start_year","GPH_status","sovereign","sovereign_GPH_code","sovereign_GPH_name","error","entitiesMap","wEntities","mapObjIndexed","ownLinks","selectOccupations","pipe","filter","equals","selectCampains","occ","campains","capMap","slug","flatten","values","name","start","min","d","end","max","occupations","campainsMap","wMapEntities","Object","objectSpread","forEach","loadedActionCreator","data","entitiesStatusPromise","csv","statusPromise","fetch","then","response","json","dataPromise","Promise","all","AppContextProvider","props","_useReducer","useReducer","_useReducer2","slicedToArray","useEffect","react_default","a","createElement","Provider","value","children","translate","x","y","concat","margins","formater","timeFormat","Timelines","xScale","nbLines","colorScale","useMemo","width","elHeight","lineHeight","height","groupWidth","hideGroupLabels","groupHeight","range","yScale","scaleLinear","domain","xAxisTop","axisTop","xAxisBottom","axisBottom","intervalBarHeight","intervalBarMargin","_useState","useState","_useState2","hover","setHover","_useState3","_useState4","setStatus","groupedByStatus","sortBy","e","priority","sortStatus","reduce","acc","_ref","toConsumableArray","reverse","className","style","onMouseLeave","s","onClick","cx","legend-item","legend-item--hidden","backgroundColor","transform","ref","element","select","call","patternUnits","stroke","strokeWidth","group","has_status","_ref3","_ref4","x1","x2","y1","y2","strokeOpacity","clipPath","cursor","fontSize","dy","onEntityClick","slice","w","Math","intervalMinWidth","rx","onMouseEnter","fill","isNaN","TopMenu","country","Fragment","src","react_router_dom","to","sortDate","sort","b","countYears","orderMethods","duration","_ref2","aLinks","bLinks","year","_ref5","_ref6","_ref9","sortByStartYear","deOverlapLinks","os","o","previous","warn","push","Country","history","useCallback","Array","from","associations","minDate","_ref11","maxDate","_ref13","scaleTime","useContext","scaleOrdinal","keys","orderBy","setOrderBy","orderedCampains","TopMenu_TopMenu","src_timeline","dimension","react_select_browser_esm","onChange","defaultValue","label","theme","borderRadius","colors","primary25","primary","background","color","isSearchable","options","Loader","match","params","find","Country_Country","assign","countriesToOptions","sortByOccupation","size","getCol","pathOr","sortByColonyNumber","takeTop5","take","Examples","mostOccupied","mostCollonies","disapeared","sortByOccEndDate","sortByEndDate","filterSortByDis","yearFormat","Intl","DateTimeFormat","format","Home","event","href","lib","placeholder","App_Examples","title","textAlign","App","src_AppContext","basename","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.801da013.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { csv, DSVRowArray, max, min, values } from 'd3';\nimport { useReducer, createContext } from \"react\";\nimport { action, ActionType } from 'typesafe-actions';\nimport uuid from 'uuid';\nimport groupBy from 'ramda/es/groupBy';\nimport flatten from 'ramda/es/flatten';\nimport map from 'ramda/es/map';\nimport equals from 'ramda/es/equals';\nimport filter from 'ramda/es/filter';\nimport pipe from 'ramda/es/pipe';\nimport mapObjIndexed from 'ramda/es/mapObjIndexed';\nimport { MultiMap } from 'mnemonist';\n\nconst initialState: GlobalState = {\n  links: [],\n  entities: [],\n  status: {}\n}\n\ninterface AppContext {\n  state: any;\n  dispatch: (action: any) => any;\n}\n\nexport const AppContext = createContext<AppContext>({\n  state: initialState,\n  dispatch: (arg) => {\n    console.log('not la bonne fonction poto', arg);\n  }\n});\n\nconst groupByGPHCode = groupBy((link: Link) => link.GPH_code);\n\nconst toMap = (object: {[key: string]: Link[]}, entities: {[key: string]: Entity}) => {\n  const map = new MultiMap<Entity, Link>();\n  for (const key in object) {\n    if (object.hasOwnProperty(key)) {\n      const links = object[key];\n      const entity = entities[key]\n      if (entity === undefined) {\n        continue\n      }\n      for (let index = 0; index < links.length; index++) {\n        const link = links[index];\n        map.set(entity, link);\n      }\n    }\n  }\n  return map;\n}\n\nconst reducer = (state: GlobalState, action: ActionType<any>) => {\n  switch (action.type) {\n    case 'LOADED': {\n      const linkPayload = action.payload[0];\n      const statusPayload = action.payload[1];\n      const links: WLink[] = linkPayload.map((csvLink: CSVLink) => {\n        const l = {\n          id: uuid() as string,\n          GPH_code: csvLink.GPH_code,\n          GPH_name: csvLink.GPH_name,\n          end_year: new Date(csvLink.end_year),\n          start_year: new Date(csvLink.start_year),\n          status: statusPayload[csvLink.GPH_status],\n          sovereign: {\n            GPH_code: csvLink.sovereign_GPH_code,\n            GPH_name: csvLink.sovereign_GPH_name,\n          }\n        } as WLink\n        if (!l.status)\n          console.error(\"unknown link type\", csvLink)\n        return l;\n      });\n      const entitiesMap = groupByGPHCode(links);\n      const wEntities: {[key: string]: Entity} = mapObjIndexed((ownLinks: Link[], GPH_code: GPH_code) => {\n        const selectOccupations = pipe(\n          filter((link: WLink) => equals(link.GPH_code, GPH_code)),\n          groupBy((link: WLink) => link.sovereign.GPH_code || GPH_code),\n        );\n        const selectCampains = pipe(\n          filter((link: WLink) => equals(link.sovereign.GPH_code, GPH_code)),\n          groupByGPHCode,\n        );\n        const occ = selectOccupations(ownLinks);\n        const campains = selectCampains(links);\n        const capMap = groupBy(link => link.status.slug, flatten(values(campains)));\n        return {\n          id: GPH_code,\n          name: entitiesMap[GPH_code][0].GPH_name,\n          start: min(ownLinks, d => d.start_year),\n          end: max(ownLinks, d => d.end_year),\n          occupations: occ,\n          campains: campains,\n          campainsMap: capMap,\n        };\n      }, entitiesMap);\n      const wMapEntities = map((entity: WEntity) => ({\n        ...entity,\n        occupations: toMap(entity.occupations, wEntities),\n        campains: toMap(entity.campains, wEntities)\n      }), wEntities);\n      links.forEach((link: WLink) => {\n        link.sovereign = wMapEntities[link.sovereign.GPH_code];\n      });\n      return {\n        links: links as unknown as Link[],\n        entities: values(wMapEntities),\n        status: statusPayload\n      }\n    }\n  }\n  return state;\n}\n\nconst loadedActionCreator = (data: DSVRowArray<string>) => action('LOADED', data);\n\nconst entitiesStatusPromise = csv('./data/GeoPolHist_entities_status_over_time.csv');\nconst statusPromise = fetch('./data/GPH_status.json').then(response => response.json());\nconst dataPromise = Promise.all([entitiesStatusPromise, statusPromise])\nconst AppContextProvider: React.FC = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState as never);\n  useEffect(() => {\n    dataPromise\n      .then(pipe(loadedActionCreator, dispatch));\n  }, []);\n  return (\n    <AppContext.Provider value={{state, dispatch: dispatch}}>\n      {props.children}\n    </AppContext.Provider>\n  )\n}\n\nexport default AppContextProvider;\n","\nexport const xGPHName = (link: Link) => link.GPH_name;\n// export const xSovereignCowName = (link: Link) => link.sovereign_COW_name;\n// export const xType = (link: Link) => link.link_type === 'Sovereign';\n\nexport const translate = (x: number, y: number) => `translate(${x}, ${y})`\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { axisBottom, select, scaleLinear, timeFormat, ScaleTime, axisTop, ScaleOrdinal } from 'd3';\nimport values from 'ramda/es/values';\nimport sortBy from 'ramda/es/sortBy';\nimport cx from 'classnames';\nimport { translate } from './utils';\nimport './timeline.css'\nimport uuid from 'uuid';\n\n\nconst margins = {\n  top: 0,\n  right: 0,\n  bottom: 50,\n  left: 0\n};\nconst formater = timeFormat('%Y');\n\n\nconst Timelines: React.FC<{\n  data: [Entity, Link[]][];\n  hideGroupLabels?: boolean;\n  intervalMinWidth: number;\n  lineHeight: number;\n  width: number;\n  onEntityClick: (GPH_code: string) => void;\n  xScale: ScaleTime<number, number>;\n  nbLines: number;\n  colorScale: ScaleOrdinal<string, string>;\n}> = props => {\n\n  // useWhyDidYouUpdate('timeline', props);\n  const { xScale, data, nbLines, colorScale } = props;\n  const id = useMemo(uuid, []);\n  const width = props.width - margins.left - margins.right;\n  const elHeight = nbLines * props.lineHeight + margins.top + margins.bottom;\n  const height = elHeight - margins.top - margins.bottom;\n  const groupWidth = props.hideGroupLabels ? 0 : 200;\n  const groupHeight = height / data.length;\n  const intervalRectWidth = (d: Link) => Math.max(props.intervalMinWidth, xScale(d.end_year) - xScale(d.start_year))\n  xScale.range([groupWidth, width-15]);\n  const yScale = scaleLinear()\n    .domain([0, nbLines])\n    .range([0, height]);\n  const xAxisTop = axisTop(xScale);\n  const xAxisBottom = axisBottom(xScale);\n  const intervalBarHeight = 0.8 * groupHeight;\n  const intervalBarMargin = (groupHeight - intervalBarHeight) / 2;\n  const [hover, setHover] = useState<{link: Link, index: number}>();\n  const [status, setStatus] = useState<any>();\n  const sortStatus = sortBy(e => e.priority+e.GPH_status);\n  const groupedByStatus = sortStatus(values(data.reduce((acc, [, links]: [Entity, Link[]]) => [...acc, ...links], [])\n                      .reduce((acc, link:Link) => { \n                          acc[link.status.slug] = link.status;\n                          return acc;}, {}))).reverse()\n\n  useEffect(() => () => {setHover(null); setStatus(null)}, [props.data]);\n  return (\n    <div className='timelines-container' style={{width: width}} onMouseLeave={() => setHover(null)}>\n      <div className=\"legend\">\n        <div className='legend-container'>\n          {groupedByStatus.map( (s:Status) => \n            <span key={s.slug} onClick={() => {\n                status === s.slug ? setStatus(null) : setStatus(s.slug);\n              }} \n              className={cx({\n                'legend-item': true,\n                'legend-item--hidden': status && status !== s.slug,\n              })}>\n              <div className=\"colorLegendItem\"  style={{backgroundColor: colorScale(s.slug)} as React.CSSProperties}></div>\n              <span>{s.GPH_status}</span>\n            </span>\n          )}\n        </div>\n        <svg height={20} width={props.width}>\n          <g transform={translate(margins.left, margins.top)}>\n            <g transform={translate(0, 17)} ref={element => {\n              if (element) {\n                select(element).call(xAxisTop);\n              }\n            }} />\n          </g>\n        </svg>\n      </div>\n      <div className=\"timeline\">\n        <svg height={elHeight} width={props.width}>\n          <g transform={translate(margins.left, margins.top)}>\n            <defs>\n              <pattern id={`diagonalHatch-${id}`} patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\">\n                <path d=\"M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2\" style={{stroke: 'black', strokeWidth: 1}} />\n              </pattern>\n              <clipPath id={`name-area-${id}`}>\n                <rect x={0} y={0} height={height} width={groupWidth} />\n              </clipPath>\n            </defs>\n            <g transform={translate(0, height)} ref={element => {\n              if (element) {\n                select(element).call(xAxisBottom);\n              }\n            }} />\n            <g className={cx({\n              group: true,\n              has_status: !!status\n            }, status)}>\n              {data.map(([entity, links], index) => {\n                return (\n                  <g key={entity.name} className={entity.name} transform={translate(0, yScale(index))}>\n                    <line className='group-separator' x1={0} x2={width} y1={0} y2={0} stroke='black' strokeOpacity={0.1} />\n                    <text className='entity-label' style={{clipPath: `url(#name-area-${id})`, cursor: 'pointer'}} fontSize='1em' dy='1em' width={groupWidth} onClick={() => props.onEntityClick(entity.id)}>\n                      {entity.name.length <= 22 ? entity.name : entity.name.slice(0,22)+'…'}\n                        <title>{entity.name}</title>\n                    </text>\n                    <g>\n                      {links.map((link: Link) => {\n                        const w = intervalRectWidth(link);\n                        return (\n                          <g key={link.id} transform={translate(xScale(link.start_year), intervalBarMargin)}>\n                            <rect\n                              rx='5'\n                              className={cx('link-rect', link.status.slug)}\n                              onClick={() => props.onEntityClick(entity.id)}\n                              onMouseEnter={() => setHover({link: link, index: index})}\n                              fill={isNaN(w) ? `url(#diagonalHatch-${id})` : colorScale(link.status.slug)}\n                              stroke={hover && hover.link === link ? 'white' : 'black'}\n                              strokeOpacity={hover && hover.link === link ? 1 : 0.2}\n                              strokeWidth={hover && hover.link === link ? 2 : 1}\n                              width={isNaN(w) ? '100%' : w}\n                              height={intervalBarHeight}\n                              y={0}\n                              x={0}\n                            />\n                          </g>\n                        )\n                      })}\n                    </g>\n                  </g>\n                )\n              })}\n            </g>\n          </g>\n        </svg>\n        {hover && <div className='tooltip-container' style={{\n          transform: `translate(${xScale(hover.link.start_year)}px, ${yScale(hover.index)-props.lineHeight}px)`,\n          //minWidth: intervalRectWidth(hover.link)\n        }}>\n          <span className='tooltip'>{hover.link.GPH_name} - {hover.link.status.GPH_status} - {formater(hover.link.start_year)} to {formater(hover.link.end_year)}</span>\n        </div>}\n      </div>\n    </div>\n  );\n}\n\nexport default Timelines;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const TopMenu: React.FC<{\n  country?: Entity;\n}> = (props) => {\n  const { country } = props;\n  return (\n    <>\n      <div className=\"topMenu\">\n        <span className=\"appTitle\">\n          <img src=\"./GeoPolHist.svg\" />\n          <Link to=\"/\">GeoPolHist</Link>\n        </span>\n      </div>\n    </>\n  );\n};\n","import React, { useContext, useCallback, useMemo, useState } from \"react\";\nimport sort from \"ramda/es/sort\";\nimport sortBy from \"ramda/es/sortBy\";\nimport equals from \"ramda/es/equals\";\nimport reduce from \"ramda/es/reduce\";\n\nimport { AppContext } from \"./AppContext\";\nimport Timelines from \"./timeline\";\nimport { Link as RLink, RouteComponentProps } from \"react-router-dom\";\nimport { min, max, scaleTime, scaleOrdinal } from \"d3\";\n\nimport \"./Country.css\";\n\nimport Select from \"react-select\";\nimport { TopMenu } from \"./TopMenu\";\n\nconst sortDate = sort((a: Date, b: Date) => a > b);\nconst countYears = reduce(\n  (acc: number, l: Link) => +l.end_year - +l.start_year + acc,\n  0\n);\nconst orderMethods = {\n  duration: sort(\n    ([, aLinks], [, bLinks]) => countYears(bLinks) - countYears(aLinks)\n  ),\n  year: sort(\n    ([, aLinks], [, bLinks]) =>\n      +sortDate(aLinks.map((l) => l.start_year))[0] -\n      +sortDate(bLinks.map((l) => l.start_year))[0]\n  ),\n  name: sortBy(([entity]) => entity.name),\n};\nconst sortByStartYear = sort((a: Link, b: Link) => a.start_year > b.start_year);\nconst deOverlapLinks = (os: [Entity, Link[]][]) =>\n  os.map((o: [Entity, Link[]]) =>\n    // rewrite links for every object\n    [\n      o[0],\n      sortByStartYear(o[1]).reduce((acc: Link[], l: Link) => {\n        if (!acc || acc.length === 0) return [{ ...l }];\n        else {\n          const previous: Link = acc[acc.length - 1];\n          if (previous.end_year > l.start_year) {\n            // manage overlap\n            if (previous.status.priority >= l.status.priority) {\n              const start_year = previous.end_year;\n              if (\n                (+start_year === +previous.end_year &&\n                  +l.end_year === +previous.end_year) ||\n                +start_year > +l.end_year\n              )\n                console.warn(\"one overlapping status removed\", l);\n              // add l but modify start_year\n              else acc.push({ ...l, start_year });\n            } else {\n              // previous is a copy we can mute it\n              previous.end_year = l.start_year;\n              acc.push({ ...l });\n            }\n          } else acc.push({ ...l });\n          return acc;\n        }\n      }, []),\n    ]\n  );\n\nconst Country: React.FC<\n  {\n    id: string;\n    country: Entity;\n  } & RouteComponentProps<{\n    id: string;\n  }>\n> = (props) => {\n  const { history, country } = props;\n  const onEntityClick = useCallback(\n    (GPH_code) => {\n      history.push(`/country/${GPH_code}`);\n    },\n    [history]\n  );\n\n  const occupations: [Entity, Link[]][] = deOverlapLinks(\n    Array.from(country.occupations.associations())\n  ) as [Entity, Link[]][];\n  const campains: [Entity, Link[]][] = deOverlapLinks(\n    Array.from(country.campains.associations())\n  ) as [Entity, Link[]][];\n\n  // deoverlap links\n  const data: [Entity, Link[]][] = useMemo(\n    () => [...occupations, ...campains],\n    [occupations, campains]\n  );\n  const minDate = min(data, ([{ start }]) => start);\n  const maxDate = max(data, ([{ end }]) => end);\n  const xScale = scaleTime().domain([minDate, maxDate]);\n  // color scale generated thanks to @jacomyma tools iwanthue\n  const { state }: { state: GlobalState } = useContext(AppContext);\n  const colorScale = scaleOrdinal([\n    \"#cd7f3d\",\n    \"#af49d8\",\n    \"#65da57\",\n    \"#d84397\",\n    \"#cbe240\",\n    \"#6c6cd4\",\n    \"#a3ca63\",\n    \"#ad63ab\",\n    \"#489046\",\n    \"#d74433\",\n    \"#6cdaaf\",\n    \"#c15b67\",\n    \"#86c5d8\",\n    \"#d8b94f\",\n    \"#6779a8\",\n    \"#787938\",\n    \"#d4a8cc\",\n    \"#4f8178\",\n    \"#cdcea7\",\n    \"#997462\",\n  ]).domain(Object.keys(state.status).map((s) => state.status[s].slug));\n  // sort select handler\n  const [orderBy, setOrderBy] = useState<any>();\n  const orderedCampains = orderMethods[orderBy || \"year\"](campains);\n\n  return (\n    <>\n      <div>\n        <TopMenu country={country} />\n        <h1 className=\"stickyTitle\">{country.name}</h1>\n        <p>GPH_code : {country.id}</p>\n        <h2>Political status</h2>\n        <Timelines\n          onEntityClick={onEntityClick}\n          intervalMinWidth={5}\n          data={occupations}\n          nbLines={country.occupations.dimension}\n          lineHeight={20}\n          width={1000}\n          xScale={xScale}\n          colorScale={colorScale}\n        />\n        {/* <Histogram width={1000} height={300} data={Array.from(country.campains.values())} /> */}\n        <div>\n          <h2>Sovereign of {country.campains.dimension} entities</h2>\n          <span>\n            sort by{\" \"}\n            <Select\n              className=\"inlineSelect\"\n              onChange={(e) => setOrderBy(e.value)}\n              defaultValue={{ value: \"year\", label: \"first date\" }}\n              theme={(theme) => ({\n                ...theme,\n                borderRadius: 5,\n                colors: {\n                  ...theme.colors,\n                  primary25: \"lightgrey\",\n                  primary: \"grey\",\n                  background: \"white\",\n                  color: \"black\",\n                },\n              })}\n              isSearchable={false}\n              options={[\n                { value: \"year\", label: \"first date\" },\n                { value: \"duration\", label: \"duration\" },\n                { value: \"name\", label: \"entity name\" },\n              ]}\n            />\n          </span>\n        </div>\n\n        <Timelines\n          onEntityClick={onEntityClick}\n          intervalMinWidth={5}\n          data={orderedCampains}\n          nbLines={country.campains.dimension}\n          lineHeight={20}\n          width={1000}\n          xScale={xScale}\n          colorScale={colorScale}\n        />\n      </div>\n    </>\n  );\n};\n\nconst Loader = (props) => {\n  const id = props.match.params.id;\n  const { state }: { state: GlobalState } = useContext(AppContext);\n  const country = state.entities.find((entity) => equals(entity.id, id));\n  if (country === undefined) {\n    return <div>Loading</div>;\n  }\n  return <Country {...props} country={country} />;\n};\n\nexport default Loader;\n","import React, { useCallback, useContext } from \"react\";\nimport { map } from \"ramda\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport sort from \"ramda/es/sort\";\nimport take from \"ramda/es/take\";\nimport pathOr from \"ramda/es/pathOr\";\n\nimport \"./App.css\";\nimport Country from \"./Country\";\nimport AppContextProvider, { AppContext } from \"./AppContext\";\nimport { RouterProps } from \"react-router\";\nimport { TopMenu } from \"./TopMenu\";\n\nimport { HashLink } from \"react-router-hash-link\";\n\nconst countriesToOptions = map((country: Entity) => ({\n  value: country.id,\n  label: country.name,\n}));\n\nconst sortByOccupation = sort(\n  (a: Entity, b: Entity) => b.occupations.size - a.occupations.size\n);\n\nconst getCol = pathOr(0, [\"campainsMap\", \"col\", \"length\"]);\n\nconst sortByColonyNumber = sort(\n  (a: Entity, b: Entity) => getCol(b) - getCol(a)\n);\n\nconst filterSortByDis = (entities: Entity[]) => {\n  const sortByOccEndDate = sort(\n    (a: WLink, b: WLink) => b.end_year > a.end_year\n  );\n  const sortByEndDate = sort((a: Entity, b: Entity) => b.end > a.end);\n  return sortByEndDate(\n    entities.filter(\n      (e) =>\n        sortByOccEndDate([...e.occupations.values()])[0].status.slug === \"dis\"\n    )\n  );\n};\n\nconst takeTop5 = take(5);\n\nconst Examples: React.FC<{ entities: Entity[] }> = (props) => {\n  const mostOccupied: Entity[] = takeTop5(sortByOccupation(props.entities));\n  const mostCollonies: Entity[] = takeTop5(sortByColonyNumber(props.entities));\n  const disapeared: Entity[] = takeTop5(filterSortByDis(props.entities));\n\n  const yearFormat = new Intl.DateTimeFormat(\"en-GB\", { year: \"numeric\" });\n  return (\n    <div>\n      <div className=\"line\">\n        <div className=\"grow\">\n          <h3>Biggest number of sovereigns</h3>\n          <ol>\n            {mostOccupied.map((entity) => (\n              <li key={entity.id}>\n                <Link to={`/country/${entity.id}`}>\n                  {entity.name} - {entity.occupations.size} sovereigns\n                </Link>\n              </li>\n            ))}\n          </ol>\n        </div>\n        <div className=\"grow\">\n          <h3>Biggest number of colonies</h3>\n          <ol>\n            {mostCollonies.map((entity) => (\n              <li key={entity.id}>\n                <Link to={`/country/${entity.id}`}>\n                  {entity.name} - {getCol(entity)} colonies\n                </Link>\n              </li>\n            ))}\n          </ol>\n        </div>\n        <div className=\"grow\">\n          <h3>Most recently dissolved</h3>\n          <ol>\n            {disapeared.map((entity) => (\n              <li key={entity.id}>\n                <Link to={`/country/${entity.id}`}>\n                  {entity.name} - {yearFormat.format(entity.end)}\n                </Link>\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n      {/* <h3>Countries by status</h3>\n      <div className='line'>\n        {values(state.status).map(status => {\n          const getNb = pathOr(0, ['campainsMap', status.slug, 'length']);\n          const sortByStatus = sort((a, b) => getNb(b) - getNb(a));\n          return (\n            <div key={status.slug} className='grow'>\n              <h3>counties with most {status.GPH_status}:</h3>\n              <ol>\n                {takeTop5(sortByStatus(props.entities)).map(entity => {\n                  return <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n                })}\n              </ol>\n            </div>\n          );\n        })}\n      </div> */}\n    </div>\n  );\n};\n\nconst Home: React.FC<RouterProps> = (props) => {\n  const { state }: { state: GlobalState } = useContext(AppContext);\n  const onChange = useCallback(\n    (event) => {\n      props.history.push(`/country/${event.value}`);\n    },\n    [props.history]\n  );\n  return (\n    <>\n      <TopMenu />\n\n      <div className=\"container container--home\">\n        <h1>\n          Geopolitical entities of the world\n          <br />\n          by political status since 1816\n        </h1>\n        <p>\n          GeoPolHist is a quantitative tool that focuses on the questions “what\n          are?” and “how many?” countries in the world. Created from the lists\n          of{\" \"}\n          <a href=\"https://correlatesofwar.org/data-sets/state-system-membership\">\n            states\n          </a>{\" \"}\n          and{\" \"}\n          <a href=\"https://correlatesofwar.org/data-sets/colonial-dependency-contiguity\">\n            dependencies\n          </a>{\" \"}\n          built by the Correlates of War project, GeoPolHist provides a dataset and visual documentation that identifies the\n          political status of each of the geopolitical entities that existed in\n          the world since 1816. It allows for an approach of the political\n          history of the world based on the dichotomy between sovereign and\n          non-sovereign entities.\n        </p>\n        <p>\n          See the <HashLink to=\"#methodology\">methodology</HashLink> and{\" \"}\n          <HashLink to=\"#dataset\">data set</HashLink> sections to learn more.\n        </p>\n\n        <h2 id=\"explore\">Explore Geopolitical entities</h2>\n\n        <Select\n          placeholder={\n            state.entities.length\n              ? \"Search for a Geopolitical entity\"\n              : \"Still loading\"\n          }\n          onChange={onChange}\n          options={countriesToOptions(state.entities)}\n          theme={(theme) => ({\n            ...theme,\n            borderRadius: 5,\n            colors: {\n              ...theme.colors,\n              primary25: \"lightgrey\",\n              primary: \"grey\",\n              background: \"white\",\n              color: \"black\",\n            },\n          })}\n        />\n        {state.entities.length ? (\n          <Examples entities={state.entities} />\n        ) : (\n          <p>Data is still loading...</p>\n        )}\n\n        <h2>Three periods in the political history of the world since 1816</h2>\n        <p>\n          Over the last two centuries, the political structure of the world went\n          through three distinct periods during which one <a href=\"./data/GeoPolHist_status.csv\">status</a> predominated.\n          From 1816 to the Berlin Conference in 1884/85, 13 % of the\n          geopolitical entities of the world were sovereign (unrecognized); from\n          1886 to 1949, 20 % were ‘colony’, ‘possession or ‘protectorate’’;\n          since 1950, 16 % are ‘sovereign’ (in the strict sense).\n        </p>\n        <iframe\n          title=\"GPH status evolutions in 1816,1885,1950 and 2020\"\n          src=\"./sankey.html\"\n        ></iframe>\n        <p style={{ textAlign: \"center\" }}>\n          <a href=\"./sankey.html\">open the diagram in full screen</a>\n        </p>\n        <h2 id=\"methodology\">Methodology</h2>\n        <p>\n          A geopolitical entity is any form of human social community or territory{\" \"}\n          that has been involved in an international or intra-national conflict during{\" \"}\n          the post-Napoleonic period and that is geographically based.{\" \"}\n          These entities are “political” in the Aristotelian sense of the political order,{\" \"}\n          whose ultimate goal is peace through justice inside the entity,{\" \"}\n          war and conflicts remaining a potential option outside the limits of the entity.{\" \"}\n          Through the period covered by the GPH database, political entities of the type “human social community”{\" \"}\n          have taken the form of tribe, chiefdom, city-state, kingdom, empire, seigneury,{\" \"}\n          or nation. GPH entities are sovereign and independent or not.{\" \"}\n          Political entities of the type “territory” are uninhabited islands, atolls or reefs.\n        </p>\n        <p>\n          The GeoPolHist dataset will be fully described in the paper{\" \"}\n          <i>\n            \"How many countries in the world? The geopolitical entities of the\n            world and their political status from 1816 to the present\"\n          </i>{\" \"}\n          which is currently under review\n        </p>\n        <h2 id=\"dataset\">GeoPolHist data set</h2>\n        <p>\n          The GeoPolHist data set is published under ODbl licence:\n          <ul>\n            <li>\n              <a href=\"./data/GeoPolHist_status.csv\">GeoPolHist_status.csv</a> -\n              list of political status and their definition;\n            </li>\n            <li>\n              <a href=\"./data/GeoPolHist_entities.csv\">\n                GeoPolHist_entities.csv\n              </a>{\" \"}\n              - list of GPH entities;\n            </li>\n            <li>\n              <a href=\"./data/GeoPolHist_entities_status_in_time.csv\">\n                GeoPolHist_entities_status_in_time.csv\n              </a>{\" \"}\n              - list of GPH entities by political status in time;\n            </li>\n          </ul>\n        </p>\n\n        <p>\n          The data set is versioned and fully documented in the{\" \"}\n          <a href=\"https://github.com/medialab/GeoPolHist\">\n            GeoPolHist datapackage repository\n          </a>\n        </p>\n      </div>\n    </>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Router\n          basename={process.env.NODE_ENV === \"production\" ? \"/GeoPolHist\" : \"/\"}\n        >\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/country/:id\" component={Country} />\n        </Router>\n      </AppContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}