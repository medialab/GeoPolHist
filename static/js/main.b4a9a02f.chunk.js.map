{"version":3,"sources":["AppContext.tsx","utils.ts","timeline.tsx","Country.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","links","entities","status","AppContext","createContext","state","dispatch","arg","console","log","groupByGPHCode","groupBy","link","GPH_code","toMap","object","map","MultiMap","key","hasOwnProperty","entity","undefined","index","length","set","reducer","action","type","linkPayload","payload","statusPayload","csvLink","l","id","uuid","GPH_name","end_year","Date","start_year","GPH_status","sovereign","sovereign_GPH_code","sovereign_GPH_name","error","entitiesMap","wEntities","mapObjIndexed","ownLinks","selectOccupations","pipe","filter","equals","selectCampains","occ","campains","capMap","slug","flatten","values","name","start","min","d","end","max","occupations","campainsMap","wMapEntities","Object","objectSpread","forEach","loadedActionCreator","data","entitiesStatusPromise","csv","statusPromise","fetch","then","response","json","dataPromise","Promise","all","AppContextProvider","props","_useReducer","useReducer","_useReducer2","slicedToArray","useEffect","react_default","a","createElement","Provider","value","children","translate","x","y","concat","legend","margins","formater","timeFormat","groupByStatus","reduce","acc","_ref","toConsumableArray","Timelines","useContext","colorScale","scaleOrdinal","domain","keys","s","xScale","nbLines","useMemo","width","elHeight","lineHeight","height","groupWidth","hideGroupLabels","groupHeight","intervalRectWidth","Math","intervalMinWidth","range","yScale","scaleLinear","xAxisTop","axisTop","xAxisBottom","axisBottom","intervalBarHeight","intervalBarMargin","_useState","useState","_useState2","hover","setHover","_useState3","_useState4","setStatus","groupedByStatus","sortDate","sort","b","sortEntityByStartDate","className","style","onMouseLeave","transform","minWidth","onClick","cx","legend-item","legend-item--hidden","backgroundColor","ref","element","select","call","patternUnits","stroke","strokeWidth","group","has_status","_ref3","_ref4","x1","x2","y1","y2","strokeOpacity","clipPath","fontSize","dy","slice","w","rx","onLinkClick","onMouseEnter","fill","isNaN","dateReducer","accumulator","sortByDuration","_ref2","aLinks","Country","history","country","onOccupiedLinkClick","useCallback","push","onCampainsLinkClick","Array","from","associations","minDate","_ref5","maxDate","_ref7","scaleTime","react_router_dom","to","src_timeline","dimension","Loader","match","params","find","Country_Country","assign","countriesToOptions","label","sortByBiggestEmpire","entityA","entityB","size","sortByOccupation","getCol","pathOr","sortByColonyNumber","takeTop5","take","Examples","mostOccupied","mostCollonies","disapeared","sortByOccEndDate","sortByEndDate","e","filterSortByDis","yearFormat","Intl","DateTimeFormat","year","format","Home","onChange","event","react_select_browser_esm","placeholder","options","App_Examples","href","src","App","src_AppContext","basename","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4a9a02f.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { csv, DSVRowArray, max, min, values } from 'd3';\nimport { useReducer, createContext } from \"react\";\nimport { action, ActionType } from 'typesafe-actions';\nimport uuid from 'uuid';\nimport groupBy from 'ramda/es/groupBy';\nimport flatten from 'ramda/es/flatten';\nimport map from 'ramda/es/map';\nimport equals from 'ramda/es/equals';\nimport filter from 'ramda/es/filter';\nimport pipe from 'ramda/es/pipe';\nimport mapObjIndexed from 'ramda/es/mapObjIndexed';\nimport { MultiMap } from 'mnemonist';\n\nconst initialState: GlobalState = {\n  links: [],\n  entities: [],\n  status: {}\n}\n\ninterface AppContext {\n  state: any;\n  dispatch: (action: any) => any;\n}\n\nexport const AppContext = createContext<AppContext>({\n  state: initialState,\n  dispatch: (arg) => {\n    console.log('not la bonne fonction poto', arg);\n  }\n});\n\nconst groupByGPHCode = groupBy((link: Link) => link.GPH_code);\n\nconst toMap = (object: {[key: string]: Link[]}, entities: {[key: string]: Entity}) => {\n  const map = new MultiMap<Entity, Link>();\n  for (const key in object) {\n    if (object.hasOwnProperty(key)) {\n      const links = object[key];\n      const entity = entities[key]\n      if (entity === undefined) {\n        continue\n      }\n      for (let index = 0; index < links.length; index++) {\n        const link = links[index];\n        map.set(entity, link);\n      }\n    }\n  }\n  return map;\n}\n\nconst reducer = (state: GlobalState, action: ActionType<any>) => {\n  switch (action.type) {\n    case 'LOADED': {\n      const linkPayload = action.payload[0];\n      const statusPayload = action.payload[1];\n      const links: WLink[] = linkPayload.map((csvLink: CSVLink) => {\n        const l = {\n          id: uuid() as string,\n          GPH_code: csvLink.GPH_code,\n          GPH_name: csvLink.GPH_name,\n          end_year: new Date(csvLink.end_year),\n          start_year: new Date(csvLink.start_year),\n          status: statusPayload[csvLink.GPH_status],\n          sovereign: {\n            GPH_code: csvLink.sovereign_GPH_code,\n            GPH_name: csvLink.sovereign_GPH_name,\n          }\n        } as WLink\n        if (!l.status)\n          console.error(\"unknown link type\", csvLink)\n        return l;\n      });\n      const entitiesMap = groupByGPHCode(links);\n      const wEntities: {[key: string]: Entity} = mapObjIndexed((ownLinks: Link[], GPH_code: GPH_code) => {\n        const selectOccupations = pipe(\n          filter((link: WLink) => equals(link.GPH_code, GPH_code)),\n          groupBy((link: WLink) => link.sovereign.GPH_code || GPH_code),\n        );\n        const selectCampains = pipe(\n          filter((link: WLink) => equals(link.sovereign.GPH_code, GPH_code)),\n          groupByGPHCode,\n        );\n        const occ = selectOccupations(ownLinks);\n        const campains = selectCampains(links);\n        const capMap = groupBy(link => link.status.slug, flatten(values(campains)));\n        return {\n          id: GPH_code,\n          name: entitiesMap[GPH_code][0].GPH_name,\n          start: min(ownLinks, d => d.start_year),\n          end: max(ownLinks, d => d.end_year),\n          occupations: occ,\n          campains: campains,\n          campainsMap: capMap,\n        };\n      }, entitiesMap);\n      const wMapEntities = map((entity: WEntity) => ({\n        ...entity,\n        occupations: toMap(entity.occupations, wEntities),\n        campains: toMap(entity.campains, wEntities)\n      }), wEntities);\n      links.forEach((link: WLink) => {\n        link.sovereign = wMapEntities[link.sovereign.GPH_code];\n      });\n      return {\n        links: links as unknown as Link[],\n        entities: values(wMapEntities),\n        status: statusPayload\n      }\n    }\n  }\n  return state;\n}\n\nconst loadedActionCreator = (data: DSVRowArray<string>) => action('LOADED', data);\n\nconst entitiesStatusPromise = csv('./data/GeoPolHist_entities_status_in_time.csv');\nconst statusPromise = fetch('./data/GPH_status.json').then(response => response.json());\nconst dataPromise = Promise.all([entitiesStatusPromise, statusPromise])\nconst AppContextProvider: React.FC = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState as never);\n  useEffect(() => {\n    dataPromise\n      .then(pipe(loadedActionCreator, dispatch));\n  }, []);\n  return (\n    <AppContext.Provider value={{state, dispatch: dispatch}}>\n      {props.children}\n    </AppContext.Provider>\n  )\n}\n\nexport default AppContextProvider;\n","\nexport const xGPHName = (link: Link) => link.GPH_name;\n// export const xSovereignCowName = (link: Link) => link.sovereign_COW_name;\n// export const xType = (link: Link) => link.link_type === 'Sovereign';\n\nexport const translate = (x: number, y: number) => `translate(${x}, ${y})`\n","import React, { useState, useEffect, useMemo, useContext } from 'react';\nimport { scaleOrdinal, axisBottom, select, scaleLinear, timeFormat, ScaleTime, axisTop } from 'd3';\nimport values from 'ramda/es/values';\nimport reduce from 'ramda/es/reduce';\nimport countBy from 'ramda/es/countBy';\nimport sort from 'ramda/es/sort';\nimport mapObjIndexed from 'ramda/es/mapObjIndexed';\nimport pipe from 'ramda/es/pipe';\nimport cx from 'classnames';\nimport { translate } from './utils';\nimport './timeline.css'\nimport uuid from 'uuid';\nimport { AppContext } from './AppContext';\n\n\nconst legend = {\n  height: 50,\n}\nconst margins = {\n  top: 0,\n  right: 0,\n  bottom: 50,\n  left: 0\n};\nconst formater = timeFormat('%Y');\n\nconst groupByStatus = pipe(\n  reduce((acc, [, links]: [Entity, Link[]]) => [...acc, ...links], []),\n  reduce((acc, link:Link) => { \n    acc[link.status.slug] = link.status;\n    return acc;}, {})\n);\n\nconst Timelines: React.FC<{\n  data: [Entity, Link[]][];\n  hideGroupLabels?: boolean;\n  intervalMinWidth: number;\n  lineHeight: number;\n  width: number;\n  onLinkClick: (link: Link) => void;\n  xScale: ScaleTime<number, number>;\n  nbLines: number;\n}> = props => {\n\n  // color scale generated thanks to @jacomyma tools iwanthue\n  const {state}: {state: GlobalState} = useContext(AppContext);\n  const colorScale = scaleOrdinal([\"#cd7f3d\",\n  \"#af49d8\",\n  \"#65da57\",\n  \"#d84397\",\n  \"#cbe240\",\n  \"#6c6cd4\",\n  \"#a3ca63\",\n  \"#ad63ab\",\n  \"#489046\",\n  \"#d74433\",\n  \"#6cdaaf\",\n  \"#c15b67\",\n  \"#86c5d8\",\n  \"#d8b94f\",\n  \"#6779a8\",\n  \"#787938\",\n  \"#d4a8cc\",\n  \"#4f8178\",\n  \"#cdcea7\",\n  \"#997462\"]).domain(Object.keys(state.status).map(s => state.status[s].slug));\n\n  // useWhyDidYouUpdate('timeline', props);\n  const { xScale, data, nbLines } = props;\n  const id = useMemo(uuid, []);\n  const width = props.width - margins.left - margins.right;\n  const elHeight = nbLines * props.lineHeight + margins.top + margins.bottom;\n  const height = elHeight - margins.top - margins.bottom;\n  const groupWidth = props.hideGroupLabels ? 0 : 200;\n  const groupHeight = height / data.length;\n  const intervalRectWidth = (d: Link) => Math.max(props.intervalMinWidth, xScale(d.end_year) - xScale(d.start_year))\n  xScale.range([groupWidth, width-15]);\n  const yScale = scaleLinear()\n    .domain([0, nbLines])\n    .range([0, height]);\n  const xAxisTop = axisTop(xScale);\n  const xAxisBottom = axisBottom(xScale);\n  const intervalBarHeight = 0.8 * groupHeight;\n  const intervalBarMargin = (groupHeight - intervalBarHeight) / 2;\n  const [hover, setHover] = useState<{link: Link, index: number}>();\n  const [status, setStatus] = useState<any>();\n  const groupedByStatus = useMemo(() => groupByStatus(data), [data]);\n  const sortDate = sort((a:Date, b:Date) => a > b)\n  const sortEntityByStartDate = sort((a: [Entity, Link[]], b:[Entity, Link[]])=> sortDate(a[1].map(l => l.start_year))[0] > sortDate(b[1].map(l => l.start_year))[0])\n  useEffect(() => () => {setHover(null); setStatus(null)}, [props.data]);\n  return (\n    <div className='timelines-container' style={{width: width}} onMouseLeave={() => setHover(null)}>\n      {hover && <div className='tooltip-container' style={{\n        transform: `translate(${xScale(hover.link.start_year)}px, ${yScale(hover.index) + legend.height + margins.top + props.lineHeight + 20}px)`,\n        minWidth: intervalRectWidth(hover.link)\n      }}>\n        <span className='tooltip'>{hover.link.GPH_name} was a {hover.link.status.slug} from {formater(hover.link.start_year)} to {formater(hover.link.end_year)}</span>\n      </div>}\n      <div className=\"legend\">\n        <div className='legend-container'>\n          {values(mapObjIndexed((s, slug) => \n            <span onClick={() => {\n                status === slug ? setStatus(null) : setStatus(slug);\n              }} \n              className={cx({\n                'legend-item': true,\n                'legend-item--hidden': status && status !== slug,\n              })}>\n              <div className=\"colorLegendItem\" key={slug} style={{backgroundColor: colorScale(slug)} as React.CSSProperties}></div>\n              <span>{s.GPH_status}</span>\n            </span>\n          , groupedByStatus))}\n        </div>\n        <svg height={20} width={props.width}>\n          <g transform={translate(margins.left, margins.top)}>\n            <g transform={translate(0, 17)} ref={element => {\n              if (element) {\n                select(element).call(xAxisTop);\n              }\n            }} />\n          </g>\n        </svg>\n      </div>\n      <svg height={elHeight} width={props.width}>\n        <g transform={translate(margins.left, margins.top)}>\n          <defs>\n            <pattern id={`diagonalHatch-${id}`} patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\">\n              <path d=\"M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2\" style={{stroke: 'black', strokeWidth: 1}} />\n            </pattern>\n            <clipPath id={`name-area-${id}`}>\n              <rect x={0} y={0} height={height} width={groupWidth} />\n            </clipPath>\n          </defs>\n          <g transform={translate(0, height)} ref={element => {\n            if (element) {\n              select(element).call(xAxisBottom);\n            }\n          }} />\n          <g className={cx({\n            group: true,\n            has_status: !!status\n          }, status)}>\n            {sortEntityByStartDate(data).map(([entity, links], index) => {\n              return (\n                <g key={entity.name} className={entity.name} transform={translate(0, yScale(index))}>\n                  <line className='group-separator' x1={0} x2={width} y1={0} y2={0} stroke='black' strokeOpacity={0.1} />\n                  <text className='entity-label' style={{clipPath: `url(#name-area-${id})`}} fontSize='1em' dy='1em' width={groupWidth}>\n                    {entity.name.length <= 22 ? entity.name : entity.name.slice(0,22)+'…'}\n                    <title>{entity.name}</title>\n                  </text>\n                  <g>\n                    {links.map((link: Link) => {\n                      const w = intervalRectWidth(link);\n                      return (\n                        <g key={link.id} transform={translate(xScale(link.start_year), intervalBarMargin)}>\n                          <rect\n                            rx='5'\n                            className={cx('link-rect', link.status.slug)}\n                            onClick={() => props.onLinkClick(link)}\n                            onMouseEnter={() => setHover({link: link, index: index})}\n                            fill={isNaN(w) ? `url(#diagonalHatch-${id})` : colorScale(link.status.slug)}\n                            stroke={hover && hover.link === link ? 'white' : 'black'}\n                            strokeOpacity={hover && hover.link === link ? 1 : 0.2}\n                            strokeWidth={hover && hover.link === link ? 2 : 1}\n                            width={isNaN(w) ? '100%' : w}\n                            height={intervalBarHeight}\n                            y={0}\n                            x={0}\n                          />\n                        </g>\n                      )\n                    })}\n                  </g>\n                </g>\n              )\n            })}\n          </g>\n        </g>\n      </svg>\n    </div>\n  );\n}\n\nexport default Timelines;\n","import React, { useContext, useCallback, useMemo } from 'react';\nimport sort from 'ramda/es/sort';\n\nimport equals from 'ramda/es/equals';\nimport { AppContext } from './AppContext';\nimport Timelines from './timeline';\nimport { Link as RLink, RouteComponentProps } from 'react-router-dom';\nimport { min, max, scaleTime } from 'd3';\n\nconst dateReducer = (accumulator, link: Link) => accumulator + (+link.end_year) - +link.start_year\nconst sortByDuration = sort(([, aLinks], [, bLinks]) => bLinks.reduce(dateReducer, 0) - aLinks.reduce(dateReducer, 0));\n\nconst Country: React.FC<{\n  id: string,\n  country: Entity,\n} & RouteComponentProps<{\n  id: string\n}>> = (props) => {\n  const {history, country} = props;\n  const onOccupiedLinkClick = useCallback(link => {\n    history.push(`/country/${link.sovereign.id}`);\n  }, [history]);\n  const onCampainsLinkClick = useCallback(link => {\n    history.push(`/country/${link.GPH_code}`);\n  }, [history]);\n  const occupations: [Entity, Link[]][] = Array.from(country.occupations.associations());\n  const campains: [Entity, Link[]][] = Array.from(country.campains.associations());\n  const data: [Entity, Link[]][] = useMemo(() => sortByDuration([\n    ...occupations,\n    ...campains,\n  ]), [occupations, campains]);\n  const minDate = min(data, ([{start}]) => start);\n  const maxDate = max(data, ([{end}]) => end);\n  const xScale = scaleTime().domain([minDate, maxDate]);\n  return (\n    <div>\n      <aside>\n        <RLink to='/'>Home</RLink>\n      </aside>\n      <h1>{country.name} ({country.id})</h1>\n      <h2>Status</h2>\n      <Timelines\n        onLinkClick={onOccupiedLinkClick}\n        intervalMinWidth={5}\n        data={occupations}\n        nbLines={country.occupations.dimension}\n        lineHeight={20}\n        width={1000}\n        xScale={xScale}\n      />\n      {/* <Histogram width={1000} height={300} data={Array.from(country.campains.values())} /> */}\n      <h2>Sovereign of</h2>\n      <Timelines\n        onLinkClick={onCampainsLinkClick}\n        intervalMinWidth={5}\n        data={campains}\n        nbLines={country.campains.dimension}\n        lineHeight={20}\n        width={1000}\n        xScale={xScale}\n      />\n    </div>\n  );\n}\n\nconst Loader = (props) => {\n  const id = props.match.params.id;\n  const {state}: {state: GlobalState} = useContext(AppContext);\n  const country = state.entities.find(entity => equals(entity.id, id));\n  if (country === undefined) {\n    return (<div>Loading</div>);\n  }\n  return <Country {...props} country={country} />\n}\n\nexport default Loader;\n","import React, { useCallback, useContext } from 'react';\nimport { map } from 'ramda';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport Select from 'react-select';\nimport sort from 'ramda/es/sort';\nimport take from 'ramda/es/take';\nimport values from 'ramda/es/values';\nimport pathOr from 'ramda/es/pathOr';\n\nimport './App.css';\nimport Country from './Country';\nimport AppContextProvider, { AppContext } from './AppContext';\nimport { RouterProps } from 'react-router';\n\nconst countriesToOptions = map((country: Entity) => ({\n  value: country.id, label: country.name,\n}));\n\nconst sortByBiggestEmpire = sort((entityA: Entity, entityB: Entity) =>\n  entityB.campains.size - entityA.campains.size\n)\n\nconst sortByOccupation = sort((a: Entity, b: Entity) =>\n  b.occupations.size - a.occupations.size\n)\n\nconst getCol = pathOr(0, ['campainsMap', 'col', 'length'])\n\nconst sortByColonyNumber = sort((a: Entity, b: Entity) => \n  getCol(b) - getCol(a)\n)\n\nconst filterSortByDis = (entities: Entity[]) => {\n  const sortByOccEndDate = sort((a: WLink, b: WLink) =>\n    b.end_year > a.end_year\n  )\n  const sortByEndDate = sort((a: Entity, b: Entity) =>\n    b.end > a.end\n  )\n  return sortByEndDate(entities.filter(e => sortByOccEndDate([...e.occupations.values()])[0].status.slug === 'dis'))\n}\n\n\n\nconst takeTop5 = take(5)\n\nconst Examples: React.FC<{entities: Entity[]}> = (props) => {\n  const orderByBiggest: Entity[] = takeTop5(sortByBiggestEmpire(props.entities));\n  const mostOccupied: Entity[] = takeTop5(sortByOccupation(props.entities));\n  const mostCollonies: Entity[] = takeTop5(sortByColonyNumber(props.entities));\n  const disapeared: Entity[] = takeTop5(filterSortByDis(props.entities))\n\n  const {state}: {state: GlobalState} = useContext(AppContext);\n  const yearFormat = new Intl.DateTimeFormat('en-GB', {year:'numeric'})\n  return (\n    <div>\n      \n      <div className='line'>\n        <div className='grow'>\n          <h3>Biggest number of sovereigns</h3>\n          <ol>\n            {mostOccupied.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name} - {entity.occupations.size} sovereigns</Link></li>\n            )}\n          </ol>\n        </div>\n        <div className='grow'>\n          <h3>Biggest number of colonies</h3>\n          <ol>\n            {mostCollonies.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name} - {getCol(entity)} colonies</Link></li>\n            )}\n          </ol>\n        </div>\n        <div className='grow'>\n          <h3>Most recently disolved</h3>\n          <ol>\n            {disapeared.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name} - {yearFormat.format(entity.end)}</Link></li>\n            )}\n          </ol>\n        </div>\n      </div>\n      {/* <h3>Countries by status</h3>\n      <div className='line'>\n        {values(state.status).map(status => {\n          const getNb = pathOr(0, ['campainsMap', status.slug, 'length']);\n          const sortByStatus = sort((a, b) => getNb(b) - getNb(a));\n          return (\n            <div key={status.slug} className='grow'>\n              <h3>counties with most {status.GPH_status}:</h3>\n              <ol>\n                {takeTop5(sortByStatus(props.entities)).map(entity => {\n                  return <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n                })}\n              </ol>\n            </div>\n          );\n        })}\n      </div> */}\n    </div>\n  );\n}\n\nconst Home: React.FC<RouterProps> = (props) => {\n  const { state }: {state: GlobalState} = useContext(AppContext);\n  const onChange = useCallback((event) => {\n    props.history.push(`/country/${event.value}`);\n  }, [props.history]);\n  return (\n    <div className='container container--home'>\n      <h1>GeoPolHist<br></br>\n      Geo-Political entities History from 1816 to 2020</h1>\n      <p>Paragraph about the data set.</p>\n      <h2>Visualise a Geo-Political entities political history</h2>\n      <Select\n        placeholder={state.entities.length ? 'Search for a Geo-Political entity' : 'Still loading'}\n        onChange={onChange}\n        options={countriesToOptions(state.entities)}\n      />\n      {state.entities.length ? <Examples entities={state.entities} /> : <p>Data is still loading...</p>}\n      <h2>References</h2>\n      <p>See our data paper for more information about how and why we built this data set:</p>\n      <p>Dedinger Béatrice, Girard Paul, \"GeoPolHist, a new data set of the geo-political entities of the world (1816-2020)\" 2020 (in review)</p>\n      <p>Download the data set from <a href=\"https://github.com/medialab/GeoPolHist\">GeoPolHist datapackage repository</a></p>\n      <iframe src=\"./sankey.html\"></iframe>\n      <p><a href=\"./sankey.html\">open the diagram in full page</a></p>\n    </div>\n  );\n}\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Router basename={process.env.NODE_ENV === 'production' ? '/GeoPolHist' : '/'}>\n          <Route path='/' exact component={Home} />\n          <Route path='/country/:id' component={Country} />\n        </Router>\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}