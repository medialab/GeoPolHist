{"version":3,"sources":["AppContext.tsx","utils.ts","timeline.tsx","Country.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","links","entities","status","AppContext","createContext","state","dispatch","arg","console","log","groupByGPHCode","groupBy","link","GPH_code","toMap","object","map","MultiMap","key","hasOwnProperty","entity","undefined","index","length","set","reducer","action","type","linkPayload","payload","statusPayload","csvLink","l","id","uuid","GPH_name","end_year","Date","start_year","GPH_status","sovereign","sovereign_GPH_code","sovereign_GPH_name","error","entitiesMap","wEntities","mapObjIndexed","ownLinks","selectOccupations","pipe","filter","equals","selectCampains","occ","campains","capMap","slug","flatten","values","name","start","min","d","end","max","occupations","campainsMap","wMapEntities","Object","objectSpread","forEach","loadedActionCreator","data","entitiesStatusPromise","csv","statusPromise","fetch","then","response","json","dataPromise","Promise","all","AppContextProvider","props","_useReducer","useReducer","_useReducer2","slicedToArray","useEffect","react_default","a","createElement","Provider","value","children","translate","x","y","concat","legend","margins","formater","timeFormat","countByStatus","reduce","acc","_ref","toConsumableArray","countBy","Timelines","useContext","colorScale","scaleOrdinal","domain","keys","s","xScale","nbLines","useMemo","width","elHeight","lineHeight","height","groupWidth","hideGroupLabels","groupHeight","intervalRectWidth","Math","intervalMinWidth","range","yScale","scaleLinear","xAxisTop","axisTop","xAxisBottom","axisBottom","intervalBarHeight","intervalBarMargin","_useState","useState","_useState2","hover","setHover","_useState3","_useState4","setStatus","countedByStatus","className","style","onMouseLeave","transform","minWidth","number","label","onClick","cx","legend-item","legend-item--hidden","backgroundColor","ref","element","select","call","patternUnits","stroke","strokeWidth","group","has_status","_ref3","_ref4","x1","x2","y1","y2","strokeOpacity","clipPath","fontSize","dy","w","rx","onLinkClick","onMouseEnter","fill","isNaN","dateReducer","accumulator","sortByDuration","sort","_ref2","aLinks","Country","history","country","onOccupiedLinkClick","useCallback","push","onCampainsLinkClick","Array","from","associations","minDate","_ref5","maxDate","_ref7","scaleTime","react_router_dom","to","src_timeline","dimension","Loader","match","params","find","Country_Country","assign","countriesToOptions","sortByBiggestEmpire","entityA","entityB","size","sortByOccupation","b","getCol","pathOr","sortByColonyNumber","takeTop5","take","Examples","orderByBiggest","mostOccupied","mostCollonies","getNb","sortByStatus","Home","onChange","event","react_select_browser_esm","placeholder","options","App_Examples","App","src_AppContext","basename","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b4a7ec9.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { csv, DSVRowArray, max, min, values } from 'd3';\nimport { useReducer, createContext } from \"react\";\nimport { action, ActionType } from 'typesafe-actions';\nimport uuid from 'uuid';\nimport groupBy from 'ramda/es/groupBy';\nimport flatten from 'ramda/es/flatten';\nimport map from 'ramda/es/map';\nimport equals from 'ramda/es/equals';\nimport filter from 'ramda/es/filter';\nimport pipe from 'ramda/es/pipe';\nimport mapObjIndexed from 'ramda/es/mapObjIndexed';\nimport { MultiMap } from 'mnemonist';\n\nconst initialState: GlobalState = {\n  links: [],\n  entities: [],\n  status: {}\n}\n\ninterface AppContext {\n  state: any;\n  dispatch: (action: any) => any;\n}\n\nexport const AppContext = createContext<AppContext>({\n  state: initialState,\n  dispatch: (arg) => {\n    console.log('not la bonne fonction poto', arg);\n  }\n});\n\nconst groupByGPHCode = groupBy((link: Link) => link.GPH_code);\n\nconst toMap = (object: {[key: string]: Link[]}, entities: {[key: string]: Entity}) => {\n  const map = new MultiMap<Entity, Link>();\n  for (const key in object) {\n    if (object.hasOwnProperty(key)) {\n      const links = object[key];\n      const entity = entities[key]\n      if (entity === undefined) {\n        continue\n      }\n      for (let index = 0; index < links.length; index++) {\n        const link = links[index];\n        map.set(entity, link);\n      }\n    }\n  }\n  return map;\n}\n\nconst reducer = (state: GlobalState, action: ActionType<any>) => {\n  switch (action.type) {\n    case 'LOADED': {\n      const linkPayload = action.payload[0];\n      const statusPayload = action.payload[1];\n      const links: WLink[] = linkPayload.map((csvLink: CSVLink) => {\n        const l = {\n          id: uuid() as string,\n          GPH_code: csvLink.GPH_code,\n          GPH_name: csvLink.GPH_name,\n          end_year: new Date(csvLink.end_year),\n          start_year: new Date(csvLink.start_year),\n          status: statusPayload[csvLink.GPH_status],\n          sovereign: {\n            GPH_code: csvLink.sovereign_GPH_code,\n            GPH_name: csvLink.sovereign_GPH_name,\n          }\n        } as WLink\n        if (!l.status)\n          console.error(\"unknown link type\", csvLink)\n        return l;\n      });\n      const entitiesMap = groupByGPHCode(links);\n      const wEntities: {[key: string]: Entity} = mapObjIndexed((ownLinks: Link[], GPH_code: GPH_code) => {\n        const selectOccupations = pipe(\n          filter((link: WLink) => equals(link.GPH_code, GPH_code)),\n          groupBy((link: WLink) => link.sovereign.GPH_code || GPH_code),\n        );\n        const selectCampains = pipe(\n          filter((link: WLink) => equals(link.sovereign.GPH_code, GPH_code)),\n          groupByGPHCode,\n        );\n        const occ = selectOccupations(ownLinks);\n        const campains = selectCampains(links);\n        const capMap = groupBy(link => link.status.slug, flatten(values(campains)));\n        return {\n          id: GPH_code,\n          name: entitiesMap[GPH_code][0].GPH_name,\n          start: min(ownLinks, d => d.start_year),\n          end: max(ownLinks, d => d.end_year),\n          occupations: occ,\n          campains: campains,\n          campainsMap: capMap,\n        };\n      }, entitiesMap);\n      const wMapEntities = map((entity: WEntity) => ({\n        ...entity,\n        occupations: toMap(entity.occupations, wEntities),\n        campains: toMap(entity.campains, wEntities)\n      }), wEntities);\n      links.forEach((link: WLink) => {\n        link.sovereign = wMapEntities[link.sovereign.GPH_code];\n      });\n      return {\n        links: links as unknown as Link[],\n        entities: values(wMapEntities),\n        status: statusPayload\n      }\n    }\n  }\n  return state;\n}\n\nconst loadedActionCreator = (data: DSVRowArray<string>) => action('LOADED', data);\n\nconst entitiesStatusPromise = csv('./data/GeoPolHist_entities_status_in_time.csv');\nconst statusPromise = fetch('./data/GPH_status.json').then(response => response.json());\nconst dataPromise = Promise.all([entitiesStatusPromise, statusPromise])\nconst AppContextProvider: React.FC = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState as never);\n  useEffect(() => {\n    dataPromise\n      .then(pipe(loadedActionCreator, dispatch));\n  }, []);\n  return (\n    <AppContext.Provider value={{state, dispatch: dispatch}}>\n      {props.children}\n    </AppContext.Provider>\n  )\n}\n\nexport default AppContextProvider;\n","\nexport const xGPHName = (link: Link) => link.GPH_name;\n// export const xSovereignCowName = (link: Link) => link.sovereign_COW_name;\n// export const xType = (link: Link) => link.link_type === 'Sovereign';\n\nexport const translate = (x: number, y: number) => `translate(${x}, ${y})`\n","import React, { useState, useEffect, useMemo, useContext } from 'react';\nimport { scaleOrdinal, axisBottom, select, scaleLinear, timeFormat, ScaleTime, axisTop } from 'd3';\nimport values from 'ramda/es/values';\nimport reduce from 'ramda/es/reduce';\nimport countBy from 'ramda/es/countBy';\nimport mapObjIndexed from 'ramda/es/mapObjIndexed';\nimport pipe from 'ramda/es/pipe';\nimport cx from 'classnames';\nimport { translate } from './utils';\nimport './timeline.css'\nimport uuid from 'uuid';\nimport { AppContext } from './AppContext';\n\n\nconst legend = {\n  height: 50,\n}\nconst margins = {\n  top: 0,\n  right: 0,\n  bottom: 50,\n  left: 0\n};\nconst formater = timeFormat('%Y');\n\nconst countByStatus = pipe(\n  reduce((acc, [, links]: [Entity, Link[]]) => [...acc, ...links], []),\n  countBy((link: Link) => link.status.slug),\n);\n\nconst Timelines: React.FC<{\n  data: [Entity, Link[]][];\n  hideGroupLabels?: boolean;\n  intervalMinWidth: number;\n  lineHeight: number;\n  width: number;\n  onLinkClick: (link: Link) => void;\n  xScale: ScaleTime<number, number>;\n  nbLines: number;\n}> = props => {\n\n  // color scale generated thanks to @jacomyma tools iwanthue\n  const {state}: {state: GlobalState} = useContext(AppContext);\n  const colorScale = scaleOrdinal([\"#cd7f3d\",\n  \"#af49d8\",\n  \"#65da57\",\n  \"#d84397\",\n  \"#cbe240\",\n  \"#6c6cd4\",\n  \"#a3ca63\",\n  \"#ad63ab\",\n  \"#489046\",\n  \"#d74433\",\n  \"#6cdaaf\",\n  \"#c15b67\",\n  \"#86c5d8\",\n  \"#d8b94f\",\n  \"#6779a8\",\n  \"#787938\",\n  \"#d4a8cc\",\n  \"#4f8178\",\n  \"#cdcea7\",\n  \"#997462\"]).domain(Object.keys(state.status).map(s => state.status[s].slug));\n\n  // useWhyDidYouUpdate('timeline', props);\n  const { xScale, data, nbLines } = props;\n  const id = useMemo(uuid, []);\n  const width = props.width - margins.left - margins.right;\n  const elHeight = nbLines * props.lineHeight + margins.top + margins.bottom;\n  const height = elHeight - margins.top - margins.bottom;\n  const groupWidth = props.hideGroupLabels ? 0 : 200;\n  const groupHeight = height / data.length;\n  const intervalRectWidth = (d: Link) => Math.max(props.intervalMinWidth, xScale(d.end_year) - xScale(d.start_year))\n  xScale.range([groupWidth, width]);\n  const yScale = scaleLinear()\n    .domain([0, nbLines])\n    .range([0, height]);\n  const xAxisTop = axisTop(xScale);\n  const xAxisBottom = axisBottom(xScale);\n  const intervalBarHeight = 0.8 * groupHeight;\n  const intervalBarMargin = (groupHeight - intervalBarHeight) / 2;\n  const [hover, setHover] = useState<{link: Link, index: number}>();\n  const [status, setStatus] = useState<any>();\n  const countedByStatus = useMemo(() => countByStatus(data), [data]);\n  useEffect(() => () => {setHover(null); setStatus(null)}, [props.data]);\n  return (\n    <div className='timelines-container' style={{width: width}} onMouseLeave={() => setHover(null)}>\n      {hover && <div className='tooltip-container' style={{\n        transform: `translate(${xScale(hover.link.start_year)}px, ${yScale(hover.index) + legend.height + margins.top + props.lineHeight + 20}px)`,\n        minWidth: intervalRectWidth(hover.link)\n      }}>\n        <span className='tooltip'>{hover.link.GPH_name} was a {hover.link.status.slug} from {formater(hover.link.start_year)} to {formater(hover.link.end_year)}</span>\n      </div>}\n      <div className=\"legend\">\n        <div className='legend-container'>\n          {values(mapObjIndexed((number, label) => \n            <button onClick={() => status === label ? setStatus(null) : setStatus(label)} className={cx({\n              'legend-item': true,\n              'legend-item--hidden': status && status !== label,\n            })} key={label} style={{backgroundColor: colorScale(label)}}>{label} : {number}</button>\n          , countedByStatus))}\n        </div>\n        <svg height={20} width={props.width}>\n          <g transform={translate(margins.left, margins.top)}>\n            <g transform={translate(0, 17)} ref={element => {\n              if (element) {\n                select(element).call(xAxisTop);\n              }\n            }} />\n          </g>\n        </svg>\n      </div>\n      <svg height={elHeight} width={props.width}>\n        <g transform={translate(margins.left, margins.top)}>\n          <defs>\n            <pattern id={`diagonalHatch-${id}`} patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\">\n              <path d=\"M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2\" style={{stroke: 'black', strokeWidth: 1}} />\n            </pattern>\n            <clipPath id={`name-area-${id}`}>\n              <rect x={0} y={0} height={height} width={groupWidth} />\n            </clipPath>\n          </defs>\n          <g transform={translate(0, height)} ref={element => {\n            if (element) {\n              select(element).call(xAxisBottom);\n            }\n          }} />\n          <g className={cx({\n            group: true,\n            has_status: !!status\n          }, status)}>\n            {data.map(([entity, links], index) => {\n              return (\n                <g key={entity.name} className={entity.name} transform={translate(0, yScale(index))}>\n                  <line className='group-separator' x1={0} x2={width} y1={0} y2={0} stroke='black' strokeOpacity={0.1} />\n                  <text className='entity-label' style={{clipPath: `url(#name-area-${id})`}} fontSize={props.lineHeight} dy='1em'>{entity.name}</text>\n                  <g>\n                    {links.map((link: Link) => {\n                      const w = intervalRectWidth(link);\n                      return (\n                        <g key={link.id} transform={translate(xScale(link.start_year), intervalBarMargin)}>\n                          <rect\n                            rx='5'\n                            className={cx('link-rect', link.status.slug)}\n                            onClick={() => props.onLinkClick(link)}\n                            onMouseEnter={() => setHover({link: link, index: index})}\n                            fill={isNaN(w) ? `url(#diagonalHatch-${id})` : colorScale(link.status.slug)}\n                            stroke={hover && hover.link === link ? 'white' : 'black'}\n                            strokeOpacity={hover && hover.link === link ? 1 : 0.2}\n                            strokeWidth={hover && hover.link === link ? 2 : 1}\n                            width={isNaN(w) ? '100%' : w}\n                            height={intervalBarHeight}\n                            y={0}\n                            x={0}\n                          />\n                        </g>\n                      )\n                    })}\n                  </g>\n                </g>\n              )\n            })}\n          </g>\n        </g>\n      </svg>\n    </div>\n  );\n}\n\nexport default Timelines;\n","import React, { useContext, useCallback, useMemo } from 'react';\nimport sort from 'ramda/es/sort';\n\nimport equals from 'ramda/es/equals';\nimport { AppContext } from './AppContext';\nimport Timelines from './timeline';\nimport { Link as RLink, RouteComponentProps } from 'react-router-dom';\nimport { min, max, scaleTime } from 'd3';\n\nconst dateReducer = (accumulator, link: Link) => accumulator + (+link.end_year) - +link.start_year\nconst sortByDuration = sort(([, aLinks], [, bLinks]) => bLinks.reduce(dateReducer, 0) - aLinks.reduce(dateReducer, 0));\n\nconst Country: React.FC<{\n  id: string,\n  country: Entity,\n} & RouteComponentProps<{\n  id: string\n}>> = (props) => {\n  const {history, country} = props;\n  const onOccupiedLinkClick = useCallback(link => {\n    history.push(`/country/${link.sovereign.id}`);\n  }, [history]);\n  const onCampainsLinkClick = useCallback(link => {\n    history.push(`/country/${link.GPH_code}`);\n  }, [history]);\n  const occupations: [Entity, Link[]][] = Array.from(country.occupations.associations());\n  const campains: [Entity, Link[]][] = Array.from(country.campains.associations());\n  const data: [Entity, Link[]][] = useMemo(() => sortByDuration([\n    ...occupations,\n    ...campains,\n  ]), [occupations, campains]);\n  const minDate = min(data, ([{start}]) => start);\n  const maxDate = max(data, ([{end}]) => end);\n  const xScale = scaleTime().domain([minDate, maxDate]);\n  return (\n    <div>\n      <aside>\n        <RLink to='/'>Home</RLink>\n      </aside>\n      <h1>{country.name} ({country.id})</h1>\n      <h2>Status</h2>\n      <Timelines\n        onLinkClick={onOccupiedLinkClick}\n        intervalMinWidth={5}\n        data={occupations}\n        nbLines={country.occupations.dimension}\n        lineHeight={20}\n        width={1000}\n        xScale={xScale}\n      />\n      {/* <Histogram width={1000} height={300} data={Array.from(country.campains.values())} /> */}\n      <h2>Sovereign of</h2>\n      <Timelines\n        onLinkClick={onCampainsLinkClick}\n        intervalMinWidth={5}\n        data={campains}\n        nbLines={country.campains.dimension}\n        lineHeight={20}\n        width={1000}\n        xScale={xScale}\n      />\n    </div>\n  );\n}\n\nconst Loader = (props) => {\n  const id = props.match.params.id;\n  const {state}: {state: GlobalState} = useContext(AppContext);\n  const country = state.entities.find(entity => equals(entity.id, id));\n  if (country === undefined) {\n    return (<div>Loading</div>);\n  }\n  return <Country {...props} country={country} />\n}\n\nexport default Loader;\n","import React, { useCallback, useContext } from 'react';\nimport { map } from 'ramda';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport Select from 'react-select';\nimport sort from 'ramda/es/sort';\nimport take from 'ramda/es/take';\nimport values from 'ramda/es/values';\nimport pathOr from 'ramda/es/pathOr';\n\nimport './App.css';\nimport Country from './Country';\nimport AppContextProvider, { AppContext } from './AppContext';\nimport { RouterProps } from 'react-router';\n\nconst countriesToOptions = map((country: Entity) => ({\n  value: country.id, label: country.name,\n}));\n\nconst sortByBiggestEmpire = sort((entityA: Entity, entityB: Entity) =>\n  entityB.campains.size - entityA.campains.size\n)\n\nconst sortByOccupation = sort((a: Entity, b: Entity) =>\n  b.occupations.size - a.occupations.size\n)\n\nconst getCol = pathOr(0, ['campainsMap', 'col', 'length'])\n\nconst sortByColonyNumber = sort((a: Entity, b: Entity) => \n  getCol(b) - getCol(a)\n)\n\nconst takeTop5 = take(5)\n\nconst Examples: React.FC<{entities: Entity[]}> = (props) => {\n  const orderByBiggest: Entity[] = takeTop5(sortByBiggestEmpire(props.entities));\n  const mostOccupied: Entity[] = takeTop5(sortByOccupation(props.entities));\n  const mostCollonies: Entity[] = takeTop5(sortByColonyNumber(props.entities));\n\n  const {state}: {state: GlobalState} = useContext(AppContext);\n  return (\n    <div>\n      <h2>Some examples:</h2>\n      <div className='line'>\n        <div className='grow'>\n          <h3>Most aggresive empires:</h3>\n          <ol>\n            {orderByBiggest.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n            )}\n          </ol>\n        </div>\n        <div className='grow'>\n          <h3>Occupied by most different countries:</h3>\n          <ol>\n            {mostOccupied.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n            )}\n          </ol>\n        </div>\n        <div className='grow'>\n          <h3>Most colonies:</h3>\n          <ol>\n            {mostCollonies.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n            )}\n          </ol>\n        </div>\n      </div>\n      <h3>Countries by status</h3>\n      <div className='line'>\n        {values(state.status).map(status => {\n          const getNb = pathOr(0, ['campainsMap', status.slug, 'length']);\n          const sortByStatus = sort((a, b) => getNb(b) - getNb(a));\n          return (\n            <div key={status.slug} className='grow'>\n              <h3>counties with most {status.GPH_status}:</h3>\n              <ol>\n                {takeTop5(sortByStatus(props.entities)).map(entity => {\n                  return <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n                })}\n              </ol>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst Home: React.FC<RouterProps> = (props) => {\n  const { state }: {state: GlobalState} = useContext(AppContext);\n  const onChange = useCallback((event) => {\n    props.history.push(`/country/${event.value}`);\n  }, [props.history]);\n  return (\n    <div className='container container--home'>\n      <h1>Welcome</h1>\n      <h3>To the correlates of war time series explorer</h3>\n      <p>Type a country or a territorial name in the above text input :</p>\n      <Select\n        placeholder={state.entities.length ? 'Type in' : 'Still loading'}\n        onChange={onChange}\n        options={countriesToOptions(state.entities)}\n      />\n      {state.entities.length ? <Examples entities={state.entities} /> : <p>Data is still loading...</p>}\n    </div>\n  );\n}\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Router basename={process.env.NODE_ENV === 'production' ? '/GeoPolHist' : '/'}>\n          <Route path='/' exact component={Home} />\n          <Route path='/country/:id' component={Country} />\n        </Router>\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}