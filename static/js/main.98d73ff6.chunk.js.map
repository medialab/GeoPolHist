{"version":3,"sources":["utils.ts","AppContext.tsx","timeline.tsx","Country.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["STATUS_SLUG","translate_link_type","Became discovered","slug","priority","Became part of","Became colony of","Became possession of","Became dependency of","Became concession of","Claimed by","Became protectorate of","Became associated state of","Occupied by","Leased to","Became neutral or demilitarized zone of","Mandated to","Sovereign","Unincorporated territory","Autonomous constituent country of","Sovereign (unrecognized)","Sovereign (limited)","International","Informal","Protected area of","Unknown","translate","x","y","concat","initialState","links","entities","AppContext","createContext","state","dispatch","arg","console","log","groupByCOWCode","groupBy","link","COW_code","toMap","SOV","SOV_U","SOV_L","object","map","MultiMap","key","hasOwnProperty","entity","undefined","index","length","set","reducer","action","type","payload","csvLink","l","id","uuid","COW_name","end_year","Date","start_year","status","link_type","sovereign","sovereign_COW_code","sovereign_COW_name","error","entitiesMap","wEntities","mapObjIndexed","ownLinks","selectOccupations","pipe","filter","equals","selectCampains","occ","campains","capMap","flatten","values","name","start","min","d","end","max","occupations","campainsMap","wMapEntities","Object","objectSpread","forEach","loadedActionCreator","data","dataPromise","csv","AppContextProvider","props","_useReducer","useReducer","_useReducer2","slicedToArray","useEffect","then","react_default","a","createElement","Provider","value","children","colorScale","scaleOrdinal","domain","legend","margins","formater","timeFormat","countByStatus","reduce","acc","_ref","toConsumableArray","countBy","Timelines","xScale","nbLines","useMemo","width","elHeight","lineHeight","height","groupWidth","hideGroupLabels","groupHeight","intervalRectWidth","Math","intervalMinWidth","range","yScale","scaleLinear","xAxisTop","axisTop","xAxisBottom","axisBottom","intervalBarHeight","intervalBarMargin","_useState","useState","_useState2","hover","setHover","_useState3","_useState4","setStatus","countedByStatus","className","style","onMouseLeave","transform","minWidth","number","label","onClick","cx","legend-item","legend-item--hidden","backgroundColor","ref","element","select","call","patternUnits","stroke","strokeWidth","group","has_status","_ref3","_ref4","x1","x2","y1","y2","strokeOpacity","clipPath","fontSize","dy","w","rx","onLinkClick","onMouseEnter","fill","isNaN","dateReducer","accumulator","sortByDuration","sort","_ref2","aLinks","Country","history","country","onOccupiedLinkClick","useCallback","push","onCampainsLinkClick","Array","from","associations","minDate","_ref5","maxDate","_ref7","scaleTime","react_router_dom","to","src_timeline","dimension","Loader","match","params","useContext","find","Country_Country","assign","countriesToOptions","sortByBiggestEmpire","entityA","entityB","size","sortByOccupation","b","getCol","pathOr","sortByColonyNumber","takeTop5","take","Examples","orderByBiggest","mostOccupied","mostCollonies","getNb","sortByStatus","Home","onChange","event","react_select_browser_esm","placeholder","options","App_Examples","App","src_AppContext","basename","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98d73ff6.chunk.js","sourcesContent":["\nexport const xCowName = (link: Link) => link.COW_name;\n// export const xSovereignCowName = (link: Link) => link.sovereign_COW_name;\n// export const xType = (link: Link) => link.link_type === 'Sovereign';\nexport const translate_link_type: any = {\n  \"Became discovered\" : {\"slug\":\"disc\",\"priority\":0},\n  \"Became part of\" : {\"slug\":\"part\",\"priority\":2},\n  \"Became colony of\": {\"slug\":\"col\",\"priority\":3},\n  \"Became possession of\": {\"slug\":\"poss\",\"priority\":3},\n  \"Became dependency of\": {\"slug\":\"dep\", \"priority\":3},\n  \"Became concession of\": {\"slug\":\"cons\", \"priority\":3},\n  \"Claimed by\": {\"slug\":\"claim\",\"priority\":0},\n  \"Became protectorate of\": {\"slug\":\"prot\",\"priority\":3},\n  \"Became associated state of\": {\"slug\":\"assoc\",\"priority\":0},\n  \"Occupied by\": {\"slug\":\"occ\",\"priority\":1},\n  \"Leased to\": {\"slug\":\"leas\",\"priority\":0},\n  \"Became neutral or demilitarized zone of\": {\"slug\":\"neut\",\"priority\":0},\n  \"Mandated to\": {\"slug\":\"mand\",\"priority\":0},\n  \"Sovereign\": {\"slug\":\"SOV\",\"priority\":4},\n  \"Unincorporated territory\": {\"slug\":\"uninc\",\"priority\":0},\n  \"Autonomous constituent country of\": {\"slug\":\"autonom\",\"priority\":0},\n  \"Sovereign (unrecognized)\": {\"slug\":\"SOV_U\",\"priority\":0},\n  \"Sovereign (limited)\": {\"slug\":\"SOV_L\",\"priority\":1},\n  \"International\":  {\"slug\":\"int\",\"priority\":3},\n  \"Informal\":  {\"slug\":\"inf\",\"priority\":2},\n  \"Protected area of\": {\"slug\":\"protected\",\"priority\":0},\n  \"Unknown\": {\"slug\":\"N/A\",\"priority\":0}\n}\n\nexport const translate = (x: number, y: number) => `translate(${x}, ${y})`\n\nexport enum STATUS_SLUG {\n  disc = \"disc\",\n  part = \"part\",\n  col = \"col\",\n  poss = \"poss\",\n  claim = \"claim\",\n  prot = \"prot\",\n  assoc = \"assoc\",\n  occ = \"occ\",\n  leas = \"leas\",\n  neut = \"neut\",\n  mand = \"mand\",\n  SOV = \"SOV\",\n  uninc = \"uninc\",\n  autonom = \"autonom\",\n  SOV_U = \"SOV_U\",\n  SOV_L = \"SOV_L\",\n  protected = \"protected\",\n  NA = \"N/A\",\n  alliance = \"alliance\",\n  inf = \"informal\",\n  cons = \"concession\",\n  int = \"international\",\n  dep = \"dependency\"\n}\n","import React, { useEffect } from 'react';\nimport { csv, DSVRowArray, max, min, values } from 'd3';\nimport { useReducer, createContext } from \"react\";\nimport { action, ActionType } from 'typesafe-actions';\nimport uuid from 'uuid';\nimport { translate_link_type, STATUS_SLUG } from './utils';\nimport groupBy from 'ramda/es/groupBy';\nimport flatten from 'ramda/es/flatten';\nimport map from 'ramda/es/map';\nimport equals from 'ramda/es/equals';\nimport filter from 'ramda/es/filter';\nimport pipe from 'ramda/es/pipe';\nimport mapObjIndexed from 'ramda/es/mapObjIndexed';\nimport { MultiMap } from 'mnemonist';\n\nconst initialState: GlobalState = {\n  links: [],\n  entities: [],\n}\n\ninterface AppContext {\n  state: any;\n  dispatch: (action: any) => any;\n}\n\nexport const AppContext = createContext<AppContext>({\n  state: initialState,\n  dispatch: (arg) => {\n    console.log('not la bonne fonction poto', arg);\n  }\n});\n\nconst groupByCOWCode = groupBy((link: Link) => link.COW_code);\n\nconst SOV = [STATUS_SLUG.SOV, STATUS_SLUG.SOV_U, STATUS_SLUG.SOV_L]\n\nconst toMap = (object: {[key: string]: Link[]}, entities: {[key: string]: Entity}) => {\n  const map = new MultiMap<Entity, Link>();\n  for (const key in object) {\n    if (object.hasOwnProperty(key)) {\n      const links = object[key];\n      const entity = entities[key]\n      if (entity === undefined) {\n        continue\n      }\n      for (let index = 0; index < links.length; index++) {\n        const link = links[index];\n        map.set(entity, link);\n      }\n    }\n  }\n  return map;\n}\n\nconst reducer = (state: GlobalState, action: ActionType<any>) => {\n  switch (action.type) {\n    case 'LOADED': {\n      const links: WLink[] = action.payload.map((csvLink: CSVLink) => {\n        const l = {\n          id: uuid() as string,\n          COW_code: csvLink.COW_code,\n          COW_name: csvLink.COW_name,\n          end_year: new Date(csvLink.end_year),\n          start_year: new Date(csvLink.start_year),\n          status: translate_link_type[csvLink.link_type],\n          sovereign: {\n            COW_code: csvLink.sovereign_COW_code,\n            COW_name: csvLink.sovereign_COW_name,\n          }\n        } as WLink\n        if (!l.status)\n          console.error(\"unknown link type\", csvLink)\n        return l;\n      });\n      const entitiesMap = groupByCOWCode(links);\n      const wEntities: {[key: string]: Entity} = mapObjIndexed((ownLinks: Link[], COW_code: COW_code) => {\n        const selectOccupations = pipe(\n          filter((link: WLink) => equals(link.COW_code, COW_code)),\n          // groupByCOWCode,\n          groupBy((link: WLink) => link.sovereign.COW_code || COW_code),\n        );\n        const selectCampains = pipe(\n          filter((link: WLink) => equals(link.sovereign.COW_code, COW_code)),\n          groupByCOWCode,\n        );\n        const occ = selectOccupations(ownLinks);\n        const campains = selectCampains(links);\n        const capMap = groupBy(link => link.status.slug, flatten(values(campains)));\n        return {\n          id: COW_code,\n          name: entitiesMap[COW_code][0].COW_name,\n          start: min(ownLinks, d => d.start_year),\n          end: max(ownLinks, d => d.end_year),\n          occupations: occ,\n          campains: campains,\n          campainsMap: capMap,\n        };\n      }, entitiesMap);\n      const wMapEntities = map((entity: WEntity) => ({\n        ...entity,\n        occupations: toMap(entity.occupations, wEntities),\n        campains: toMap(entity.campains, wEntities)\n      }), wEntities);\n      links.forEach((link: WLink) => {\n        link.sovereign = wMapEntities[link.sovereign.COW_code];\n      });\n      return {\n        links: links as unknown as Link[],\n        entities: values(wMapEntities)\n      }\n    }\n  }\n  return state;\n}\n\nconst loadedActionCreator = (data: DSVRowArray<string>) => action('LOADED', data);\n\nconst dataPromise = csv('data/Political_entities_in_time.csv');\nconst AppContextProvider: React.FC = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState as never);\n  useEffect(() => {\n    dataPromise.then(pipe(loadedActionCreator, dispatch));\n  }, []);\n  return (\n    <AppContext.Provider value={{state, dispatch: dispatch}}>\n      {props.children}\n    </AppContext.Provider>\n  )\n}\n\nexport default AppContextProvider;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { scaleOrdinal, axisBottom, select, scaleLinear, timeFormat, ScaleTime, axisTop } from 'd3';\nimport values from 'ramda/es/values';\nimport reduce from 'ramda/es/reduce';\nimport countBy from 'ramda/es/countBy';\nimport mapObjIndexed from 'ramda/es/mapObjIndexed';\nimport pipe from 'ramda/es/pipe';\nimport cx from 'classnames';\nimport { translate, STATUS_SLUG } from './utils';\nimport './timeline.css'\nimport uuid from 'uuid';\n\nconst colorScale = scaleOrdinal(['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000']).domain(values(STATUS_SLUG));\nconst legend = {\n  height: 50,\n}\nconst margins = {\n  top: 0,\n  right: 0,\n  bottom: 50,\n  left: 0\n};\nconst formater = timeFormat('%Y');\n\nconst countByStatus = pipe(\n  reduce((acc, [, links]: [Entity, Link[]]) => [...acc, ...links], []),\n  countBy((link: Link) => link.status.slug),\n);\n\nconst Timelines: React.FC<{\n  data: [Entity, Link[]][];\n  hideGroupLabels?: boolean;\n  intervalMinWidth: number;\n  lineHeight: number;\n  width: number;\n  onLinkClick: (link: Link) => void;\n  xScale: ScaleTime<number, number>;\n  nbLines: number;\n}> = props => {\n  // useWhyDidYouUpdate('timeline', props);\n  const { xScale, data, nbLines } = props;\n  const id = useMemo(uuid, []);\n  const width = props.width - margins.left - margins.right;\n  const elHeight = nbLines * props.lineHeight + margins.top + margins.bottom;\n  const height = elHeight - margins.top - margins.bottom;\n  const groupWidth = props.hideGroupLabels ? 0 : 200;\n  const groupHeight = height / data.length;\n  const intervalRectWidth = (d: Link) => Math.max(props.intervalMinWidth, xScale(d.end_year) - xScale(d.start_year))\n  xScale.range([groupWidth, width]);\n  const yScale = scaleLinear()\n    .domain([0, nbLines])\n    .range([0, height]);\n  const xAxisTop = axisTop(xScale);\n  const xAxisBottom = axisBottom(xScale);\n  const intervalBarHeight = 0.8 * groupHeight;\n  const intervalBarMargin = (groupHeight - intervalBarHeight) / 2;\n  const [hover, setHover] = useState<{link: Link, index: number}>();\n  const [status, setStatus] = useState<STATUS_SLUG>();\n  const countedByStatus = useMemo(() => countByStatus(data), [data]);\n  useEffect(() => () => {setHover(null); setStatus(null)}, [props.data]);\n  return (\n    <div className='timelines-container' style={{width: width}} onMouseLeave={() => setHover(null)}>\n      {hover && <div className='tooltip-container' style={{\n        transform: `translate(${xScale(hover.link.start_year)}px, ${yScale(hover.index) + legend.height + margins.top + props.lineHeight + 20}px)`,\n        minWidth: intervalRectWidth(hover.link)\n      }}>\n        <span className='tooltip'>{hover.link.COW_name} was a {hover.link.status.slug} from {formater(hover.link.start_year)} to {formater(hover.link.end_year)}</span>\n      </div>}\n      <div className=\"legend\">\n        <div className='legend-container'>\n          {values(mapObjIndexed((number, label) => \n            <button onClick={() => status === label ? setStatus(null) : setStatus(label)} className={cx({\n              'legend-item': true,\n              'legend-item--hidden': status && status !== label,\n            })} key={label} style={{backgroundColor: colorScale(label)}}>{label} : {number}</button>\n          , countedByStatus))}\n        </div>\n        <svg height={20} width={props.width}>\n          <g transform={translate(margins.left, margins.top)}>\n            <g transform={translate(0, 17)} ref={element => {\n              if (element) {\n                select(element).call(xAxisTop);\n              }\n            }} />\n          </g>\n        </svg>\n      </div>\n      <svg height={elHeight} width={props.width}>\n        <g transform={translate(margins.left, margins.top)}>\n          <defs>\n            <pattern id={`diagonalHatch-${id}`} patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\">\n              <path d=\"M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2\" style={{stroke: 'black', strokeWidth: 1}} />\n            </pattern>\n            <clipPath id={`name-area-${id}`}>\n              <rect x={0} y={0} height={height} width={groupWidth} />\n            </clipPath>\n          </defs>\n          <g transform={translate(0, height)} ref={element => {\n            if (element) {\n              select(element).call(xAxisBottom);\n            }\n          }} />\n          <g className={cx({\n            group: true,\n            has_status: !!status\n          }, status)}>\n            {data.map(([entity, links], index) => {\n              return (\n                <g key={entity.name} className={entity.name} transform={translate(0, yScale(index))}>\n                  <line className='group-separator' x1={0} x2={width} y1={0} y2={0} stroke='black' strokeOpacity={0.1} />\n                  <text className='entity-label' style={{clipPath: `url(#name-area-${id})`}} fontSize={props.lineHeight} dy='1em'>{entity.name}</text>\n                  <g>\n                    {links.map((link: Link) => {\n                      const w = intervalRectWidth(link);\n                      return (\n                        <g key={link.id} transform={translate(xScale(link.start_year), intervalBarMargin)}>\n                          <rect\n                            rx='5'\n                            className={cx('link-rect', link.status.slug)}\n                            onClick={() => props.onLinkClick(link)}\n                            onMouseEnter={() => setHover({link: link, index: index})}\n                            fill={isNaN(w) ? `url(#diagonalHatch-${id})` : colorScale(link.status.slug)}\n                            stroke={hover && hover.link === link ? 'white' : 'black'}\n                            strokeOpacity={hover && hover.link === link ? 1 : 0.2}\n                            strokeWidth={hover && hover.link === link ? 2 : 1}\n                            width={isNaN(w) ? '100%' : w}\n                            height={intervalBarHeight}\n                            y={0}\n                            x={0}\n                          />\n                        </g>\n                      )\n                    })}\n                  </g>\n                </g>\n              )\n            })}\n          </g>\n        </g>\n      </svg>\n    </div>\n  );\n}\n\nexport default Timelines;\n","import React, { useContext, useCallback, useMemo } from 'react';\nimport sort from 'ramda/es/sort';\n\nimport equals from 'ramda/es/equals';\nimport { AppContext } from './AppContext';\nimport Timelines from './timeline';\nimport { Link as RLink, RouteComponentProps } from 'react-router-dom';\nimport { min, max, scaleTime } from 'd3';\n\nconst dateReducer = (accumulator, link: Link) => accumulator + (+link.end_year) - +link.start_year\nconst sortByDuration = sort(([, aLinks], [, bLinks]) => bLinks.reduce(dateReducer, 0) - aLinks.reduce(dateReducer, 0));\n\nconst Country: React.FC<{\n  id: string,\n  country: Entity,\n} & RouteComponentProps<{\n  id: string\n}>> = (props) => {\n  const {history, country} = props;\n  const onOccupiedLinkClick = useCallback(link => {\n    history.push(`/country/${link.sovereign.id}`);\n  }, [history]);\n  const onCampainsLinkClick = useCallback(link => {\n    history.push(`/country/${link.COW_code}`);\n  }, [history]);\n  const occupations: [Entity, Link[]][] = Array.from(country.occupations.associations());\n  const campains: [Entity, Link[]][] = Array.from(country.campains.associations());\n  const data: [Entity, Link[]][] = useMemo(() => sortByDuration([\n    ...occupations,\n    ...campains,\n  ]), [occupations, campains]);\n  const minDate = min(data, ([{start}]) => start);\n  const maxDate = max(data, ([{end}]) => end);\n  const xScale = scaleTime().domain([minDate, maxDate]);\n  return (\n    <div>\n      <aside>\n        <RLink to='/'>Home</RLink>\n      </aside>\n      <h1>{country.name}</h1>\n      <h2>Territory masters</h2>\n      <Timelines\n        onLinkClick={onOccupiedLinkClick}\n        intervalMinWidth={5}\n        data={occupations}\n        nbLines={country.occupations.dimension}\n        lineHeight={20}\n        width={1000}\n        xScale={xScale}\n      />\n      {/* <Histogram width={1000} height={300} data={Array.from(country.campains.values())} /> */}\n      <h2>Occupying territories</h2>\n      <Timelines\n        onLinkClick={onCampainsLinkClick}\n        intervalMinWidth={5}\n        data={campains}\n        nbLines={country.campains.dimension}\n        lineHeight={20}\n        width={1000}\n        xScale={xScale}\n      />\n    </div>\n  );\n}\n\nconst Loader = (props) => {\n  const id = props.match.params.id;\n  const {state}: {state: GlobalState} = useContext(AppContext);\n  const country = state.entities.find(entity => equals(entity.id, id));\n  if (country === undefined) {\n    return (<div>Loading</div>);\n  }\n  return <Country {...props} country={country} />\n}\n\nexport default Loader;\n","import React, { useCallback, useContext } from 'react';\nimport { map } from 'ramda';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport Select from 'react-select';\nimport sort from 'ramda/es/sort';\nimport take from 'ramda/es/take';\nimport values from 'ramda/es/values';\nimport pathOr from 'ramda/es/pathOr';\n\nimport './App.css';\nimport Country from './Country';\nimport AppContextProvider, { AppContext } from './AppContext';\nimport { RouterProps } from 'react-router';\nimport { STATUS_SLUG } from './utils';\n\nconst countriesToOptions = map((country: Entity) => ({\n  value: country.id, label: country.name,\n}));\n\nconst sortByBiggestEmpire = sort((entityA: Entity, entityB: Entity) =>\n  entityB.campains.size - entityA.campains.size\n)\n\nconst sortByOccupation = sort((a: Entity, b: Entity) =>\n  b.occupations.size - a.occupations.size\n)\n\nconst getCol = pathOr(0, ['campainsMap', 'col', 'length'])\n\nconst sortByColonyNumber = sort((a: Entity, b: Entity) => \n  getCol(b) - getCol(a)\n)\n\nconst takeTop5 = take(5)\n\nconst Examples: React.FC<{entities: Entity[]}> = (props) => {\n  const orderByBiggest: Entity[] = takeTop5(sortByBiggestEmpire(props.entities));\n  const mostOccupied: Entity[] = takeTop5(sortByOccupation(props.entities));\n  const mostCollonies: Entity[] = takeTop5(sortByColonyNumber(props.entities));\n  return (\n    <div>\n      <h2>Some examples:</h2>\n      <div className='line'>\n        <div className='grow'>\n          <h3>Most aggresive empires:</h3>\n          <ol>\n            {orderByBiggest.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n            )}\n          </ol>\n        </div>\n        <div className='grow'>\n          <h3>Occupied by most different countries:</h3>\n          <ol>\n            {mostOccupied.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n            )}\n          </ol>\n        </div>\n        <div className='grow'>\n          <h3>Most colonies:</h3>\n          <ol>\n            {mostCollonies.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n            )}\n          </ol>\n        </div>\n      </div>\n      <h3>Countries by status</h3>\n      <div className='line'>\n        {values(STATUS_SLUG).map(status => {\n          const getNb = pathOr(0, ['campainsMap', status, 'length']);\n          const sortByStatus = sort((a, b) => getNb(b) - getNb(a));\n          return (\n            <div key={status} className='grow'>\n              <h3>counties with most {status}:</h3>\n              <ol>\n                {takeTop5(sortByStatus(props.entities)).map(entity => {\n                  return <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n                })}\n              </ol>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst Home: React.FC<RouterProps> = (props) => {\n  const { state }: {state: GlobalState} = useContext(AppContext);\n  const onChange = useCallback((event) => {\n    props.history.push(`/country/${event.value}`);\n  }, [props.history]);\n  return (\n    <div className='container container--home'>\n      <h1>Welcome</h1>\n      <h3>To the correlates of war time series explorer</h3>\n      <p>Type a country or a territorial name in the above text input :</p>\n      <Select\n        placeholder={state.entities.length ? 'Type in' : 'Still loading'}\n        onChange={onChange}\n        options={countriesToOptions(state.entities)}\n      />\n      {state.entities.length ? <Examples entities={state.entities} /> : <p>Data is still loading...</p>}\n    </div>\n  );\n}\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Router basename={process.env.NODE_ENV === 'production' ? '/ric_entities_timelines' : '/'}>\n          <Route path='/' exact component={Home} />\n          <Route path='/country/:id' component={Country} />\n        </Router>\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}