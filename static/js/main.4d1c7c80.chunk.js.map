{"version":3,"sources":["utils.ts","AppContext.tsx","timeline.tsx","Country.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["STATUS_SLUG","translate_link_type","Became part of","slug","priority","Became colony of","Became possession of","Claimed by","Became protectorate of","Became associated state of","Occupied by","Leased to","Became neutral or demilitarized zone of","Mandated to","Sovereign","Unincorporated territory","Autonomous constituent country of","Sovereign (unrecognised)","Sovereign (limited)","Protected area of","Unknown","","translate","x","y","concat","initialState","links","entities","AppContext","createContext","state","dispatch","arg","console","log","groupByCOWCode","groupBy","link","COW_code","SOV","SOV_U","SOV_L","toMap","object","map","MultiMap","key","hasOwnProperty","entity","undefined","index","length","set","reducer","action","type","payload","csvLink","id","uuid","COW_name","end_year","Date","start_year","status","link_type","sovereign","sovereign_COW_code","sovereign_COW_name","entitiesMap","wEntities","mapObjIndexed","ownLinks","selectOccupations","pipe","filter","includes","equals","selectCampains","occ","name","start","min","d","end","max","occupations","campains","wMapEntities","Object","objectSpread","forEach","values","loadedActionCreator","data","dataPromise","csv","AppContextProvider","props","_useReducer","useReducer","_useReducer2","slicedToArray","useEffect","then","react_default","a","createElement","Provider","value","children","colorScale","scaleOrdinal","domain","legend","margins","formater","timeFormat","countByStatus","reduce","acc","_ref","toConsumableArray","countBy","Timelines","xScale","nbLines","useMemo","width","elHeight","lineHeight","height","groupWidth","hideGroupLabels","groupHeight","intervalRectWidth","Math","intervalMinWidth","range","yScale","scaleLinear","xAxisTop","axisTop","xAxisBottom","axisBottom","intervalBarHeight","intervalBarMargin","_useState","useState","_useState2","hover","setHover","_useState3","_useState4","setStatus","countedByStatus","className","style","onMouseLeave","transform","minWidth","number","label","onClick","cx","legend-item","legend-item--hidden","backgroundColor","ref","element","select","call","patternUnits","stroke","strokeWidth","group","has_status","_ref3","_ref4","x1","x2","y1","y2","strokeOpacity","clipPath","fontSize","dy","w","rx","onLinkClick","onMouseEnter","fill","isNaN","dateReducer","accumulator","sortByDuration","sort","_ref2","aLinks","Country","history","country","onOccupiedLinkClick","useCallback","push","onCampainsLinkClick","Array","from","associations","minDate","_ref5","maxDate","_ref7","scaleTime","react_router_dom","to","src_timeline","dimension","Loader","match","params","useContext","find","Country_Country","assign","countriesToOptions","sortByBiggestEmpire","entityA","entityB","size","sortByOccupation","b","takeTop5","take","Examples","orderByBiggest","mostOccupied","Home","onChange","event","react_select_browser_esm","placeholder","options","App_Examples","App","src_AppContext","basename","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d1c7c80.chunk.js","sourcesContent":["\nexport const xCowName = (link: Link) => link.COW_name;\n// export const xSovereignCowName = (link: Link) => link.sovereign_COW_name;\n// export const xType = (link: Link) => link.link_type === 'Sovereign';\nexport const translate_link_type: any = {\n  \"Became part of\" : {\"slug\":\"part\",\"priority\":2},\n  \"Became colony of\": {\"slug\":\"col\",\"priority\":3},\n  \"Became possession of\": {\"slug\":\"poss\",\"priority\":3},\n  \"Claimed by\": {\"slug\":\"claim\",\"priority\":0},\n  \"Became protectorate of\": {\"slug\":\"prot\",\"priority\":3},\n  \"Became associated state of\": {\"slug\":\"assoc\",\"priority\":0},\n  \"Occupied by\": {\"slug\":\"occ\",\"priority\":1},\n  \"Leased to\": {\"slug\":\"leas\",\"priority\":0},\n  \"Became neutral or demilitarized zone of\": {\"slug\":\"neut\",\"priority\":0},\n  \"Mandated to\": {\"slug\":\"mand\",\"priority\":0},\n  \"Sovereign\": {\"slug\":\"SOV\",\"priority\":4},\n  \"Unincorporated territory\": {\"slug\":\"uninc\",\"priority\":0},\n  \"Autonomous constituent country of\": {\"slug\":\"autonom\",\"priority\":0},\n  \"Sovereign (unrecognised)\": {\"slug\":\"SOV_U\",\"priority\":0},\n  \"Sovereign (limited)\": {\"slug\":\"SOV_L\",\"priority\":1},\n  \"Protected area of\": {\"slug\":\"protected\",\"priority\":0},\n  \"Unknown\": {\"slug\":\"N/A\",\"priority\":0},\n  \"\": {\"slug\": \"alliance\", \"priority\": 0}\n}\n\nexport const translate = (x: number, y: number) => `translate(${x}, ${y})`\n\nexport enum STATUS_SLUG {\n  part = \"part\",\n  col = \"col\",\n  poss = \"poss\",\n  claim = \"claim\",\n  prot = \"prot\",\n  assoc = \"assoc\",\n  occ = \"occ\",\n  leas = \"leas\",\n  neut = \"neut\",\n  mand = \"mand\",\n  SOV = \"SOV\",\n  uninc = \"uninc\",\n  autonom = \"autonom\",\n  SOV_U = \"SOV_U\",\n  SOV_L = \"SOV_L\",\n  protected = \"protected\",\n  NA = \"N/A\",\n  alliance = \"alliance\",\n}\n","import React, { useEffect } from 'react';\nimport { csv, DSVRowArray, max, min, values } from 'd3';\nimport { useReducer, createContext } from \"react\";\nimport { action, ActionType } from 'typesafe-actions';\nimport uuid from 'uuid';\nimport { translate_link_type, STATUS_SLUG } from './utils';\nimport groupBy from 'ramda/es/groupBy';\nimport map from 'ramda/es/map';\nimport equals from 'ramda/es/equals';\nimport filter from 'ramda/es/filter';\nimport pipe from 'ramda/es/pipe';\nimport mapObjIndexed from 'ramda/es/mapObjIndexed';\nimport { MultiMap } from 'mnemonist';\n\nconst initialState: GlobalState = {\n  links: [],\n  entities: [],\n}\n\ninterface AppContext {\n  state: any;\n  dispatch: (action: any) => any;\n}\n\nexport const AppContext = createContext<AppContext>({\n  state: initialState,\n  dispatch: (arg) => {\n    console.log('not la bonne fonction poto', arg);\n  }\n});\n\nconst groupByCOWCode = groupBy((link: Link) => link.COW_code);\n\nconst SOV = [STATUS_SLUG.SOV, STATUS_SLUG.SOV_U, STATUS_SLUG.SOV_L]\n\nconst toMap = (object: {[key: string]: Link[]}, entities: {[key: string]: Entity}) => {\n  const map = new MultiMap<Entity, Link>();\n  for (const key in object) {\n    if (object.hasOwnProperty(key)) {\n      const links = object[key];\n      const entity = entities[key]\n      if (entity === undefined) {\n        continue\n      }\n      for (let index = 0; index < links.length; index++) {\n        const link = links[index];\n        map.set(entity, link);\n      }\n    }\n  }\n  return map;\n}\n\nconst reducer = (state: GlobalState, action: ActionType<any>) => {\n  switch (action.type) {\n    case 'LOADED': {\n      const links: WLink[] = action.payload.map((csvLink: CSVLink) => {\n        return {\n          id: uuid() as string,\n          COW_code: csvLink.COW_code,\n          COW_name: csvLink.COW_name,\n          end_year: new Date(csvLink.end_year),\n          start_year: new Date(csvLink.start_year),\n          status: translate_link_type[csvLink.link_type],\n          sovereign: {\n            COW_code: csvLink.sovereign_COW_code,\n            COW_name: csvLink.sovereign_COW_name,\n          }\n        } as WLink;\n      });\n      const entitiesMap = groupByCOWCode(links);\n      const wEntities: {[key: string]: Entity} = mapObjIndexed((ownLinks: Link[], COW_code: COW_code) => {\n        const selectOccupations = pipe(\n          filter((link: WLink) => !SOV.includes(link.status.slug) && equals(link.COW_code, COW_code)),\n          // groupByCOWCode,\n          groupBy((link: WLink) => link.sovereign.COW_code),\n        );\n        const selectCampains = pipe(\n          filter((link: WLink) => equals(link.sovereign.COW_code, COW_code)),\n          groupByCOWCode,\n        );\n        const occ = selectOccupations(ownLinks);\n        // console.log(occ);\n        return {\n          id: COW_code,\n          name: entitiesMap[COW_code][0].COW_name,\n          start: min(ownLinks, d => d.start_year),\n          end: max(ownLinks, d => d.end_year),\n          occupations: occ,\n          campains: selectCampains(links)\n        };\n      }, entitiesMap);\n      const wMapEntities = map((entity: WEntity) => ({\n        ...entity,\n        occupations: toMap(entity.occupations, wEntities),\n        campains: toMap(entity.campains, wEntities)\n      }), wEntities);\n      links.forEach((link: WLink) => {\n        link.sovereign = wMapEntities[link.sovereign.COW_code];\n      });\n      return {\n        links: links as unknown as Link[],\n        entities: values(wMapEntities)\n      }\n    }\n  }\n  return state;\n}\n\nconst loadedActionCreator = (data: DSVRowArray<string>) => action('LOADED', data);\n\nconst dataPromise = csv('data/RICentities_links.csv');\nconst AppContextProvider: React.FC = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState as never);\n  useEffect(() => {\n    dataPromise.then(pipe(loadedActionCreator, dispatch));\n  }, []);\n  return (\n    <AppContext.Provider value={{state, dispatch: dispatch}}>\n      {props.children}\n    </AppContext.Provider>\n  )\n}\n\nexport default AppContextProvider;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { scaleOrdinal, axisBottom, select, scaleLinear, timeFormat, ScaleTime, axisTop } from 'd3';\nimport values from 'ramda/es/values';\nimport reduce from 'ramda/es/reduce';\nimport countBy from 'ramda/es/countBy';\nimport mapObjIndexed from 'ramda/es/mapObjIndexed';\nimport pipe from 'ramda/es/pipe';\nimport cx from 'classnames';\nimport { translate, STATUS_SLUG } from './utils';\nimport './timeline.css'\nimport uuid from 'uuid';\n\nconst colorScale = scaleOrdinal(['#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', '#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000']).domain(values(STATUS_SLUG));\nconst legend = {\n  height: 50,\n}\nconst margins = {\n  top: 0,\n  right: 0,\n  bottom: 50,\n  left: 0\n};\nconst formater = timeFormat('%Y');\n\n\nconst countByStatus = pipe(\n  reduce((acc, [, links]: [Entity, Link[]]) => [...acc, ...links], []),\n  countBy((link: Link) => link.status.slug),\n);\n\nconst Timelines: React.FC<{\n  data: [Entity, Link[]][];\n  hideGroupLabels?: boolean;\n  intervalMinWidth: number;\n  lineHeight: number;\n  width: number;\n  onLinkClick: (link: Link) => void;\n  xScale: ScaleTime<number, number>;\n  nbLines: number;\n}> = props => {\n  // useWhyDidYouUpdate('timeline', props);\n  const { xScale, data, nbLines } = props;\n  const id = useMemo(uuid, []);\n  const width = props.width - margins.left - margins.right;\n  const elHeight = nbLines * props.lineHeight + margins.top + margins.bottom;\n  const height = elHeight - margins.top - margins.bottom;\n  const groupWidth = props.hideGroupLabels ? 0 : 200;\n  const groupHeight = height / data.length;\n  const intervalRectWidth = (d: Link) => Math.max(props.intervalMinWidth, xScale(d.end_year) - xScale(d.start_year))\n  xScale.range([groupWidth, width]);\n  const yScale = scaleLinear()\n    .domain([0, nbLines])\n    .range([0, height]);\n  const xAxisTop = axisTop(xScale);\n  const xAxisBottom = axisBottom(xScale);\n  const intervalBarHeight = 0.8 * groupHeight;\n  const intervalBarMargin = (groupHeight - intervalBarHeight) / 2;\n  const [hover, setHover] = useState<{link: Link, index: number}>();\n  const [status, setStatus] = useState<STATUS_SLUG>();\n  const countedByStatus = useMemo(() => countByStatus(data), [data]);\n  useEffect(() => () => {setHover(null); setStatus(null)}, [props.data]);\n  return (\n    <div className='timelines-container' style={{width: width}} onMouseLeave={() => setHover(null)}>\n      {hover && <div className='tooltip-container' style={{\n        transform: `translate(${xScale(hover.link.start_year)}px, ${yScale(hover.index) + legend.height + margins.top + props.lineHeight + 20}px)`,\n        minWidth: intervalRectWidth(hover.link)\n      }}>\n        <span className='tooltip'>{hover.link.COW_name} was a {hover.link.status.slug} from {formater(hover.link.start_year)} to {formater(hover.link.end_year)}</span>\n      </div>}\n      <div className=\"legend\">\n        <div className='legend-container'>\n          {values(mapObjIndexed((number, label) => \n            <button onClick={() => status === label ? setStatus(null) : setStatus(label)} className={cx({\n              'legend-item': true,\n              'legend-item--hidden': status && status !== label,\n            })} key={label} style={{backgroundColor: colorScale(label)}}>{label} : {number}</button>\n          , countedByStatus))}\n        </div>\n        <svg height={20} width={props.width}>\n          <g transform={translate(margins.left, margins.top)}>\n            <g transform={translate(0, 17)} ref={element => {\n              if (element) {\n                select(element).call(xAxisTop);\n              }\n            }} />\n          </g>\n        </svg>\n      </div>\n      <svg height={elHeight} width={props.width}>\n        <g transform={translate(margins.left, margins.top)}>\n          <defs>\n            <pattern id={`diagonalHatch-${id}`} patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\">\n              <path d=\"M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2\" style={{stroke: 'black', strokeWidth: 1}} />\n            </pattern>\n            <clipPath id={`name-area-${id}`}>\n              <rect x={0} y={0} height={height} width={groupWidth} />\n            </clipPath>\n          </defs>\n          <g transform={translate(0, height)} ref={element => {\n            if (element) {\n              select(element).call(xAxisBottom);\n            }\n          }} />\n          <g className={cx({\n            group: true,\n            has_status: !!status\n          }, status)}>\n            {data.map(([entity, links], index) => {\n              return (\n                <g key={entity.name} className={entity.name} transform={translate(0, yScale(index))}>\n                  <line className='group-separator' x1={0} x2={width} y1={0} y2={0} stroke='black' strokeOpacity={0.1} />\n                  <text className='entity-label' style={{clipPath: `url(#name-area-${id})`}} fontSize={props.lineHeight} dy='1em'>{entity.name}</text>\n                  <g>\n                    {links.map((link: Link) => {\n                      const w = intervalRectWidth(link);\n                      return (\n                        <g key={link.id} transform={translate(xScale(link.start_year), intervalBarMargin)}>\n                          <rect\n                            rx='5'\n                            className={cx('link-rect', link.status.slug)}\n                            onClick={() => props.onLinkClick(link)}\n                            onMouseEnter={() => setHover({link: link, index: index})}\n                            fill={isNaN(w) ? `url(#diagonalHatch-${id})` : colorScale(link.status.slug)}\n                            stroke={hover && hover.link === link ? 'white' : 'black'}\n                            strokeOpacity={hover && hover.link === link ? 1 : 0.2}\n                            strokeWidth={hover && hover.link === link ? 2 : 1}\n                            width={isNaN(w) ? '100%' : w}\n                            height={intervalBarHeight}\n                            y={0}\n                            x={0}\n                          />\n                        </g>\n                      )\n                    })}\n                  </g>\n                </g>\n              )\n            })}\n          </g>\n        </g>\n      </svg>\n    </div>\n  );\n}\n\nexport default Timelines;\n","import React, { useContext, useCallback, useMemo } from 'react';\nimport sort from 'ramda/es/sort';\n\nimport equals from 'ramda/es/equals';\nimport { AppContext } from './AppContext';\nimport Timelines from './timeline';\nimport { Link as RLink, RouteComponentProps } from 'react-router-dom';\nimport { min, max, scaleTime } from 'd3';\n\nconst dateReducer = (accumulator, link: Link) => accumulator + (+link.end_year) - +link.start_year\nconst sortByDuration = sort(([, aLinks], [, bLinks]) => bLinks.reduce(dateReducer, 0) - aLinks.reduce(dateReducer, 0));\n\nconst Country: React.FC<{\n  id: string,\n  country: Entity,\n} & RouteComponentProps<{\n  id: string\n}>> = (props) => {\n  const {history, country} = props;\n  const onOccupiedLinkClick = useCallback(link => {\n    history.push(`/country/${link.sovereign.id}`);\n  }, [history]);\n  const onCampainsLinkClick = useCallback(link => {\n    history.push(`/country/${link.COW_code}`);\n  }, [history]);\n  const occupations: [Entity, Link[]][] = Array.from(country.occupations.associations());\n  const campains: [Entity, Link[]][] = Array.from(country.campains.associations());\n  const data: [Entity, Link[]][] = useMemo(() => sortByDuration([\n    ...occupations,\n    ...campains,\n  ]), [occupations, campains]);\n  const minDate = min(data, ([{start}]) => start);\n  const maxDate = max(data, ([{end}]) => end);\n  const xScale = scaleTime().domain([minDate, maxDate]);\n  return (\n    <div>\n      <aside>\n        <RLink to='/'>Home</RLink>\n      </aside>\n      <h1>{country.name}</h1>\n      <h2>Territory masters</h2>\n      <Timelines\n        onLinkClick={onOccupiedLinkClick}\n        intervalMinWidth={5}\n        data={occupations}\n        nbLines={country.occupations.dimension}\n        lineHeight={20}\n        width={1000}\n        xScale={xScale}\n      />\n      {/* <Histogram width={1000} height={300} data={Array.from(country.campains.values())} /> */}\n      <h2>Occupying territories</h2>\n      <Timelines\n        onLinkClick={onCampainsLinkClick}\n        intervalMinWidth={5}\n        data={campains}\n        nbLines={country.campains.dimension}\n        lineHeight={20}\n        width={1000}\n        xScale={xScale}\n      />\n    </div>\n  );\n}\n\nconst Loader = (props) => {\n  const id = props.match.params.id;\n  const {state}: {state: GlobalState} = useContext(AppContext);\n  const country = state.entities.find(entity => equals(entity.id, id));\n  if (country === undefined) {\n    return (<div>Loading</div>);\n  }\n  return <Country {...props} country={country} />\n}\n\nexport default Loader;\n","import React, { useCallback, useContext } from 'react';\nimport { map } from 'ramda';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport Select from 'react-select';\nimport sort from 'ramda/es/sort';\nimport take from 'ramda/es/take';\n\nimport './App.css';\nimport Country from './Country';\nimport AppContextProvider, { AppContext } from './AppContext';\nimport { RouterProps } from 'react-router';\n\nconst countriesToOptions = map((country: Entity) => ({\n  value: country.id, label: country.name,\n}));\n\nconst sortByBiggestEmpire = sort((entityA: Entity, entityB: Entity) =>\n  entityB.campains.size - entityA.campains.size\n)\n\nconst sortByOccupation = sort((a: Entity, b: Entity) =>\n  b.occupations.size - a.occupations.size\n)\n\nconst takeTop5 = take(5)\n\nconst Examples: React.FC<{entities: Entity[]}> = (props) => {\n  const orderByBiggest: Entity[] = takeTop5(sortByBiggestEmpire(props.entities));\n  const mostOccupied: Entity[] = takeTop5(sortByOccupation(props.entities));\n  return (\n    <div>\n      <h2>Some examples:</h2>\n      <div className='line'>\n        <div className='grow'>\n          <h3>Most aggresive empires:</h3>\n          <ol>\n            {orderByBiggest.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n            )}\n          </ol>\n        </div>\n        <div className='grow'>\n          <h3>Occupied by most different countries:</h3>\n          <ol>\n            {mostOccupied.map(entity =>\n              <li key={entity.id}><Link to={`/country/${entity.id}`}>{entity.name}</Link></li>\n            )}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Home: React.FC<RouterProps> = (props) => {\n  const { state }: {state: GlobalState} = useContext(AppContext);\n  const onChange = useCallback((event) => {\n    props.history.push(`/country/${event.value}`);\n  }, [props.history]);\n  return (\n    <div className='container container--home'>\n      <h1>Welcome</h1>\n      <h3>To the correlates of war time series explorer</h3>\n      <p>Type a country or a territorial name in the above text input :</p>\n      <Select\n        placeholder={state.entities.length ? 'Type in' : 'Still loading'}\n        onChange={onChange}\n        options={countriesToOptions(state.entities)}\n      />\n      {state.entities.length ? <Examples entities={state.entities} /> : <p>Data is still loading...</p>}\n    </div>\n  );\n}\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Router basename={process.env.NODE_ENV === 'production' ? '/ric_entities_timelines' : '/'}>\n          <Route path='/' exact component={Home} />\n          <Route path='/country/:id' component={Country} />\n        </Router>\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}